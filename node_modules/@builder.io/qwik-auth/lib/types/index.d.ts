import type { AuthConfig, Session } from '@auth/core/types';
import { type QRL } from '@builder.io/qwik';
import { type RequestEvent, type RequestEventCommon, z } from '@builder.io/qwik-city';
export type GetSessionResult = Promise<{
    data: Session | null;
    cookie: any;
}>;
export type QwikAuthConfig = AuthConfig;
export declare function serverAuthQrl(authOptions: QRL<(ev: RequestEventCommon) => QwikAuthConfig>): {
    useAuthSignin: import("@builder.io/qwik-city").Action<{
        formErrors?: undefined;
        fieldErrors?: undefined;
        failed?: undefined;
    } | {
        formErrors?: string[] | undefined;
        fieldErrors?: {
            options?: string[] | undefined;
            providerId?: string[] | undefined;
            callbackUrl?: string[] | undefined;
            authorizationParams?: string[] | undefined;
        } | undefined;
        failed?: true | undefined;
    }, {
        providerId?: string | undefined;
        callbackUrl?: string | undefined;
        options?: z.objectOutputType<{
            callbackUrl: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        authorizationParams?: string | Record<string, string> | URLSearchParams | undefined;
    }, false>;
    useAuthSignout: import("@builder.io/qwik-city").Action<{
        formErrors?: undefined;
        fieldErrors?: undefined;
        failed?: undefined;
    } | {
        formErrors?: string[] | undefined;
        fieldErrors?: {
            callbackUrl?: string[] | undefined;
        } | undefined;
        failed?: true | undefined;
    }, {
        callbackUrl?: string | undefined;
    }, false>;
    useAuthSession: import("@builder.io/qwik-city").Loader<Session | null>;
    onRequest: (req: RequestEvent) => Promise<void>;
};
export declare const serverAuth$: (first: (ev: RequestEventCommon) => QwikAuthConfig) => {
    useAuthSignin: import("@builder.io/qwik-city").Action<{
        formErrors?: undefined;
        fieldErrors?: undefined;
        failed?: undefined;
    } | {
        formErrors?: string[] | undefined;
        fieldErrors?: {
            options?: string[] | undefined;
            providerId?: string[] | undefined;
            callbackUrl?: string[] | undefined;
            authorizationParams?: string[] | undefined;
        } | undefined;
        failed?: true | undefined;
    }, {
        providerId?: string | undefined;
        callbackUrl?: string | undefined;
        options?: z.objectOutputType<{
            callbackUrl: z.ZodOptional<z.ZodString>;
        }, z.ZodTypeAny, "passthrough"> | undefined;
        authorizationParams?: string | Record<string, string> | URLSearchParams | undefined;
    }, false>;
    useAuthSignout: import("@builder.io/qwik-city").Action<{
        formErrors?: undefined;
        fieldErrors?: undefined;
        failed?: undefined;
    } | {
        formErrors?: string[] | undefined;
        fieldErrors?: {
            callbackUrl?: string[] | undefined;
        } | undefined;
        failed?: true | undefined;
    }, {
        callbackUrl?: string | undefined;
    }, false>;
    useAuthSession: import("@builder.io/qwik-city").Loader<Session | null>;
    onRequest: (req: RequestEvent) => Promise<void>;
};
export declare const ensureAuthMiddleware: (req: RequestEvent) => void;
