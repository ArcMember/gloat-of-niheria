
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    login: string
    role: string
    password: string
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type PagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {}
  scalars: $Extensions.GetResult<{
    title: string
    url: string
    content: string
    mtime: string
  }, ExtArgs["result"]["page"]>
  composites: {}
}

/**
 * Model Page
 * 
 */
export type Page = runtime.Types.DefaultSelection<PagePayload>
export type GalleryImagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {}
  scalars: $Extensions.GetResult<{
    title: string
    url: string
  }, ExtArgs["result"]["galleryImage"]>
  composites: {}
}

/**
 * Model GalleryImage
 * 
 */
export type GalleryImage = runtime.Types.DefaultSelection<GalleryImagePayload>
export type MagicRunePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {}
  scalars: $Extensions.GetResult<{
    name: string
    baseName: string
    src: string
    branch: string
    description: string
    advancedDescription: string
  }, ExtArgs["result"]["magicRune"]>
  composites: {}
}

/**
 * Model MagicRune
 * 
 */
export type MagicRune = runtime.Types.DefaultSelection<MagicRunePayload>
export type CharacterCanonPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    subtitle: string | null
    filter: string | null
    href: string | null
    src: string | null
    author: string | null
    age: string | null
    nation: string | null
    class: string | null
    occupation: string | null
    quests: string | null
  }, ExtArgs["result"]["characterCanon"]>
  composites: {}
}

/**
 * Model CharacterCanon
 * 
 */
export type CharacterCanon = runtime.Types.DefaultSelection<CharacterCanonPayload>
export type CharacterHeroPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    relations: FactionRelationPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    subtitle: string | null
    filter: string | null
    href: string | null
    src: string | null
    age: string | null
    nation: string | null
    class: string | null
    player: string | null
    occupation: string | null
    quests: string | null
  }, ExtArgs["result"]["characterHero"]>
  composites: {}
}

/**
 * Model CharacterHero
 * 
 */
export type CharacterHero = runtime.Types.DefaultSelection<CharacterHeroPayload>
export type FactionRelationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    hero: CharacterHeroPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    heroId: number
    RT: string
    TY: string
    AF: string
    LT: string
    KF: string
    MW: string
    FL: string
    SX: string
    SK: string
    KL: string
    HL: string
  }, ExtArgs["result"]["factionRelation"]>
  composites: {}
}

/**
 * Model FactionRelation
 * 
 */
export type FactionRelation = runtime.Types.DefaultSelection<FactionRelationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.page`: Exposes CRUD operations for the **Page** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pages
    * const pages = await prisma.page.findMany()
    * ```
    */
  get page(): Prisma.PageDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.galleryImage`: Exposes CRUD operations for the **GalleryImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GalleryImages
    * const galleryImages = await prisma.galleryImage.findMany()
    * ```
    */
  get galleryImage(): Prisma.GalleryImageDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.magicRune`: Exposes CRUD operations for the **MagicRune** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MagicRunes
    * const magicRunes = await prisma.magicRune.findMany()
    * ```
    */
  get magicRune(): Prisma.MagicRuneDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.characterCanon`: Exposes CRUD operations for the **CharacterCanon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CharacterCanons
    * const characterCanons = await prisma.characterCanon.findMany()
    * ```
    */
  get characterCanon(): Prisma.CharacterCanonDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.characterHero`: Exposes CRUD operations for the **CharacterHero** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CharacterHeroes
    * const characterHeroes = await prisma.characterHero.findMany()
    * ```
    */
  get characterHero(): Prisma.CharacterHeroDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.factionRelation`: Exposes CRUD operations for the **FactionRelation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FactionRelations
    * const factionRelations = await prisma.factionRelation.findMany()
    * ```
    */
  get factionRelation(): Prisma.FactionRelationDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.1
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Page: 'Page',
    GalleryImage: 'GalleryImage',
    MagicRune: 'MagicRune',
    CharacterCanon: 'CharacterCanon',
    CharacterHero: 'CharacterHero',
    FactionRelation: 'FactionRelation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'page' | 'galleryImage' | 'magicRune' | 'characterCanon' | 'characterHero' | 'factionRelation'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
            payload: UserPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
            payload: UserPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
            payload: UserPayload<ExtArgs>
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UserPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
            payload: UserPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
            payload: UserPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
            payload: UserPayload<ExtArgs>
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
            payload: UserPayload<ExtArgs>
          }
        }
      }
      Page: {
        operations: {
          findUnique: {
            args: Prisma.PageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagePayload> | null
            payload: PagePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.PageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagePayload>
            payload: PagePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.PageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagePayload> | null
            payload: PagePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.PageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagePayload>
            payload: PagePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.PageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagePayload>[]
            payload: PagePayload<ExtArgs>
          }
          create: {
            args: Prisma.PageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagePayload>
            payload: PagePayload<ExtArgs>
          }
          delete: {
            args: Prisma.PageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagePayload>
            payload: PagePayload<ExtArgs>
          }
          update: {
            args: Prisma.PageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagePayload>
            payload: PagePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.PageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: PagePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.PageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: PagePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.PageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PagePayload>
            payload: PagePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.PageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePage>
            payload: PagePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.PageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PageGroupByOutputType>[]
            payload: PagePayload<ExtArgs>
          }
          count: {
            args: Prisma.PageCountArgs<ExtArgs>,
            result: $Utils.Optional<PageCountAggregateOutputType> | number
            payload: PagePayload<ExtArgs>
          }
        }
      }
      GalleryImage: {
        operations: {
          findUnique: {
            args: Prisma.GalleryImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GalleryImagePayload> | null
            payload: GalleryImagePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.GalleryImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GalleryImagePayload>
            payload: GalleryImagePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.GalleryImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GalleryImagePayload> | null
            payload: GalleryImagePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.GalleryImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GalleryImagePayload>
            payload: GalleryImagePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.GalleryImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GalleryImagePayload>[]
            payload: GalleryImagePayload<ExtArgs>
          }
          create: {
            args: Prisma.GalleryImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GalleryImagePayload>
            payload: GalleryImagePayload<ExtArgs>
          }
          delete: {
            args: Prisma.GalleryImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GalleryImagePayload>
            payload: GalleryImagePayload<ExtArgs>
          }
          update: {
            args: Prisma.GalleryImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GalleryImagePayload>
            payload: GalleryImagePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.GalleryImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: GalleryImagePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.GalleryImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: GalleryImagePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.GalleryImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GalleryImagePayload>
            payload: GalleryImagePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.GalleryImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGalleryImage>
            payload: GalleryImagePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.GalleryImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GalleryImageGroupByOutputType>[]
            payload: GalleryImagePayload<ExtArgs>
          }
          count: {
            args: Prisma.GalleryImageCountArgs<ExtArgs>,
            result: $Utils.Optional<GalleryImageCountAggregateOutputType> | number
            payload: GalleryImagePayload<ExtArgs>
          }
        }
      }
      MagicRune: {
        operations: {
          findUnique: {
            args: Prisma.MagicRuneFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MagicRunePayload> | null
            payload: MagicRunePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.MagicRuneFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MagicRunePayload>
            payload: MagicRunePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.MagicRuneFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MagicRunePayload> | null
            payload: MagicRunePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.MagicRuneFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MagicRunePayload>
            payload: MagicRunePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.MagicRuneFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MagicRunePayload>[]
            payload: MagicRunePayload<ExtArgs>
          }
          create: {
            args: Prisma.MagicRuneCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MagicRunePayload>
            payload: MagicRunePayload<ExtArgs>
          }
          delete: {
            args: Prisma.MagicRuneDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MagicRunePayload>
            payload: MagicRunePayload<ExtArgs>
          }
          update: {
            args: Prisma.MagicRuneUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MagicRunePayload>
            payload: MagicRunePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.MagicRuneDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: MagicRunePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.MagicRuneUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: MagicRunePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.MagicRuneUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MagicRunePayload>
            payload: MagicRunePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.MagicRuneAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMagicRune>
            payload: MagicRunePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.MagicRuneGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MagicRuneGroupByOutputType>[]
            payload: MagicRunePayload<ExtArgs>
          }
          count: {
            args: Prisma.MagicRuneCountArgs<ExtArgs>,
            result: $Utils.Optional<MagicRuneCountAggregateOutputType> | number
            payload: MagicRunePayload<ExtArgs>
          }
        }
      }
      CharacterCanon: {
        operations: {
          findUnique: {
            args: Prisma.CharacterCanonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterCanonPayload> | null
            payload: CharacterCanonPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterCanonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterCanonPayload>
            payload: CharacterCanonPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.CharacterCanonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterCanonPayload> | null
            payload: CharacterCanonPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.CharacterCanonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterCanonPayload>
            payload: CharacterCanonPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.CharacterCanonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterCanonPayload>[]
            payload: CharacterCanonPayload<ExtArgs>
          }
          create: {
            args: Prisma.CharacterCanonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterCanonPayload>
            payload: CharacterCanonPayload<ExtArgs>
          }
          delete: {
            args: Prisma.CharacterCanonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterCanonPayload>
            payload: CharacterCanonPayload<ExtArgs>
          }
          update: {
            args: Prisma.CharacterCanonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterCanonPayload>
            payload: CharacterCanonPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.CharacterCanonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CharacterCanonPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.CharacterCanonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CharacterCanonPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.CharacterCanonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterCanonPayload>
            payload: CharacterCanonPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.CharacterCanonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCharacterCanon>
            payload: CharacterCanonPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.CharacterCanonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CharacterCanonGroupByOutputType>[]
            payload: CharacterCanonPayload<ExtArgs>
          }
          count: {
            args: Prisma.CharacterCanonCountArgs<ExtArgs>,
            result: $Utils.Optional<CharacterCanonCountAggregateOutputType> | number
            payload: CharacterCanonPayload<ExtArgs>
          }
        }
      }
      CharacterHero: {
        operations: {
          findUnique: {
            args: Prisma.CharacterHeroFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterHeroPayload> | null
            payload: CharacterHeroPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.CharacterHeroFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterHeroPayload>
            payload: CharacterHeroPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.CharacterHeroFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterHeroPayload> | null
            payload: CharacterHeroPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.CharacterHeroFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterHeroPayload>
            payload: CharacterHeroPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.CharacterHeroFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterHeroPayload>[]
            payload: CharacterHeroPayload<ExtArgs>
          }
          create: {
            args: Prisma.CharacterHeroCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterHeroPayload>
            payload: CharacterHeroPayload<ExtArgs>
          }
          delete: {
            args: Prisma.CharacterHeroDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterHeroPayload>
            payload: CharacterHeroPayload<ExtArgs>
          }
          update: {
            args: Prisma.CharacterHeroUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterHeroPayload>
            payload: CharacterHeroPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.CharacterHeroDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CharacterHeroPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.CharacterHeroUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: CharacterHeroPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.CharacterHeroUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CharacterHeroPayload>
            payload: CharacterHeroPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.CharacterHeroAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCharacterHero>
            payload: CharacterHeroPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.CharacterHeroGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CharacterHeroGroupByOutputType>[]
            payload: CharacterHeroPayload<ExtArgs>
          }
          count: {
            args: Prisma.CharacterHeroCountArgs<ExtArgs>,
            result: $Utils.Optional<CharacterHeroCountAggregateOutputType> | number
            payload: CharacterHeroPayload<ExtArgs>
          }
        }
      }
      FactionRelation: {
        operations: {
          findUnique: {
            args: Prisma.FactionRelationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FactionRelationPayload> | null
            payload: FactionRelationPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.FactionRelationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FactionRelationPayload>
            payload: FactionRelationPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.FactionRelationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FactionRelationPayload> | null
            payload: FactionRelationPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.FactionRelationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FactionRelationPayload>
            payload: FactionRelationPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.FactionRelationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FactionRelationPayload>[]
            payload: FactionRelationPayload<ExtArgs>
          }
          create: {
            args: Prisma.FactionRelationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FactionRelationPayload>
            payload: FactionRelationPayload<ExtArgs>
          }
          delete: {
            args: Prisma.FactionRelationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FactionRelationPayload>
            payload: FactionRelationPayload<ExtArgs>
          }
          update: {
            args: Prisma.FactionRelationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FactionRelationPayload>
            payload: FactionRelationPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.FactionRelationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: FactionRelationPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.FactionRelationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: FactionRelationPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.FactionRelationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FactionRelationPayload>
            payload: FactionRelationPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.FactionRelationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFactionRelation>
            payload: FactionRelationPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.FactionRelationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FactionRelationGroupByOutputType>[]
            payload: FactionRelationPayload<ExtArgs>
          }
          count: {
            args: Prisma.FactionRelationCountArgs<ExtArgs>,
            result: $Utils.Optional<FactionRelationCountAggregateOutputType> | number
            payload: FactionRelationPayload<ExtArgs>
          }
        }
      }
    }
  } & {
    other: {
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    login: string | null
    role: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    login: string | null
    role: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    login: number
    role: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    login?: true
    role?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    login?: true
    role?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    login?: true
    role?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    login: string
    role: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    login?: boolean
    role?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    login?: boolean
    role?: boolean
    password?: boolean
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Model Page
   */


  export type AggregatePage = {
    _count: PageCountAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  export type PageMinAggregateOutputType = {
    title: string | null
    url: string | null
    content: string | null
    mtime: string | null
  }

  export type PageMaxAggregateOutputType = {
    title: string | null
    url: string | null
    content: string | null
    mtime: string | null
  }

  export type PageCountAggregateOutputType = {
    title: number
    url: number
    content: number
    mtime: number
    _all: number
  }


  export type PageMinAggregateInputType = {
    title?: true
    url?: true
    content?: true
    mtime?: true
  }

  export type PageMaxAggregateInputType = {
    title?: true
    url?: true
    content?: true
    mtime?: true
  }

  export type PageCountAggregateInputType = {
    title?: true
    url?: true
    content?: true
    mtime?: true
    _all?: true
  }

  export type PageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Page to aggregate.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: Enumerable<PageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pages
    **/
    _count?: true | PageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageMaxAggregateInputType
  }

  export type GetPageAggregateType<T extends PageAggregateArgs> = {
        [P in keyof T & keyof AggregatePage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePage[P]>
      : GetScalarType<T[P], AggregatePage[P]>
  }




  export type PageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PageWhereInput
    orderBy?: Enumerable<PageOrderByWithAggregationInput>
    by: PageScalarFieldEnum[]
    having?: PageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageCountAggregateInputType | true
    _min?: PageMinAggregateInputType
    _max?: PageMaxAggregateInputType
  }


  export type PageGroupByOutputType = {
    title: string
    url: string
    content: string
    mtime: string
    _count: PageCountAggregateOutputType | null
    _min: PageMinAggregateOutputType | null
    _max: PageMaxAggregateOutputType | null
  }

  type GetPageGroupByPayload<T extends PageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageGroupByOutputType[P]>
            : GetScalarType<T[P], PageGroupByOutputType[P]>
        }
      >
    >


  export type PageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    title?: boolean
    url?: boolean
    content?: boolean
    mtime?: boolean
  }, ExtArgs["result"]["page"]>

  export type PageSelectScalar = {
    title?: boolean
    url?: boolean
    content?: boolean
    mtime?: boolean
  }


  type PageGetPayload<S extends boolean | null | undefined | PageArgs> = $Types.GetResult<PagePayload, S>

  type PageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PageFindManyArgs, 'select' | 'include'> & {
      select?: PageCountAggregateInputType | true
    }

  export interface PageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Page'], meta: { name: 'Page' } }
    /**
     * Find zero or one Page that matches the filter.
     * @param {PageFindUniqueArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PageFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PageFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Page'> extends True ? Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Page that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PageFindUniqueOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Page that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PageFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PageFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Page'> extends True ? Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Page that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindFirstOrThrowArgs} args - Arguments to find a Page
     * @example
     * // Get one Page
     * const page = await prisma.page.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Pages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pages
     * const pages = await prisma.page.findMany()
     * 
     * // Get first 10 Pages
     * const pages = await prisma.page.findMany({ take: 10 })
     * 
     * // Only select the `title`
     * const pageWithTitleOnly = await prisma.page.findMany({ select: { title: true } })
     * 
    **/
    findMany<T extends PageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PagePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Page.
     * @param {PageCreateArgs} args - Arguments to create a Page.
     * @example
     * // Create one Page
     * const Page = await prisma.page.create({
     *   data: {
     *     // ... data to create a Page
     *   }
     * })
     * 
    **/
    create<T extends PageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PageCreateArgs<ExtArgs>>
    ): Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a Page.
     * @param {PageDeleteArgs} args - Arguments to delete one Page.
     * @example
     * // Delete one Page
     * const Page = await prisma.page.delete({
     *   where: {
     *     // ... filter to delete one Page
     *   }
     * })
     * 
    **/
    delete<T extends PageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PageDeleteArgs<ExtArgs>>
    ): Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Page.
     * @param {PageUpdateArgs} args - Arguments to update one Page.
     * @example
     * // Update one Page
     * const page = await prisma.page.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PageUpdateArgs<ExtArgs>>
    ): Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Pages.
     * @param {PageDeleteManyArgs} args - Arguments to filter Pages to delete.
     * @example
     * // Delete a few Pages
     * const { count } = await prisma.page.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pages
     * const page = await prisma.page.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Page.
     * @param {PageUpsertArgs} args - Arguments to update or create a Page.
     * @example
     * // Update or create a Page
     * const page = await prisma.page.upsert({
     *   create: {
     *     // ... data to create a Page
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Page we want to update
     *   }
     * })
    **/
    upsert<T extends PageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PageUpsertArgs<ExtArgs>>
    ): Prisma__PageClient<$Types.GetResult<PagePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Pages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageCountArgs} args - Arguments to filter Pages to count.
     * @example
     * // Count the number of Pages
     * const count = await prisma.page.count({
     *   where: {
     *     // ... the filter for the Pages we want to count
     *   }
     * })
    **/
    count<T extends PageCountArgs>(
      args?: Subset<T, PageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageAggregateArgs>(args: Subset<T, PageAggregateArgs>): Prisma.PrismaPromise<GetPageAggregateType<T>>

    /**
     * Group by Page.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageGroupByArgs['orderBy'] }
        : { orderBy?: PageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Page.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Page base type for findUnique actions
   */
  export type PageFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }

  /**
   * Page findUnique
   */
  export interface PageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PageFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Page findUniqueOrThrow
   */
  export type PageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where: PageWhereUniqueInput
  }


  /**
   * Page base type for findFirst actions
   */
  export type PageFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: Enumerable<PageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: Enumerable<PageScalarFieldEnum>
  }

  /**
   * Page findFirst
   */
  export interface PageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PageFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Page findFirstOrThrow
   */
  export type PageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Page to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: Enumerable<PageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pages.
     */
    distinct?: Enumerable<PageScalarFieldEnum>
  }


  /**
   * Page findMany
   */
  export type PageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter, which Pages to fetch.
     */
    where?: PageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pages to fetch.
     */
    orderBy?: Enumerable<PageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pages.
     */
    cursor?: PageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pages.
     */
    skip?: number
    distinct?: Enumerable<PageScalarFieldEnum>
  }


  /**
   * Page create
   */
  export type PageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * The data needed to create a Page.
     */
    data: XOR<PageCreateInput, PageUncheckedCreateInput>
  }


  /**
   * Page update
   */
  export type PageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * The data needed to update a Page.
     */
    data: XOR<PageUpdateInput, PageUncheckedUpdateInput>
    /**
     * Choose, which Page to update.
     */
    where: PageWhereUniqueInput
  }


  /**
   * Page updateMany
   */
  export type PageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pages.
     */
    data: XOR<PageUpdateManyMutationInput, PageUncheckedUpdateManyInput>
    /**
     * Filter which Pages to update
     */
    where?: PageWhereInput
  }


  /**
   * Page upsert
   */
  export type PageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * The filter to search for the Page to update in case it exists.
     */
    where: PageWhereUniqueInput
    /**
     * In case the Page found by the `where` argument doesn't exist, create a new Page with this data.
     */
    create: XOR<PageCreateInput, PageUncheckedCreateInput>
    /**
     * In case the Page was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageUpdateInput, PageUncheckedUpdateInput>
  }


  /**
   * Page delete
   */
  export type PageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
    /**
     * Filter which Page to delete.
     */
    where: PageWhereUniqueInput
  }


  /**
   * Page deleteMany
   */
  export type PageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pages to delete
     */
    where?: PageWhereInput
  }


  /**
   * Page without action
   */
  export type PageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Page
     */
    select?: PageSelect<ExtArgs> | null
  }



  /**
   * Model GalleryImage
   */


  export type AggregateGalleryImage = {
    _count: GalleryImageCountAggregateOutputType | null
    _min: GalleryImageMinAggregateOutputType | null
    _max: GalleryImageMaxAggregateOutputType | null
  }

  export type GalleryImageMinAggregateOutputType = {
    title: string | null
    url: string | null
  }

  export type GalleryImageMaxAggregateOutputType = {
    title: string | null
    url: string | null
  }

  export type GalleryImageCountAggregateOutputType = {
    title: number
    url: number
    _all: number
  }


  export type GalleryImageMinAggregateInputType = {
    title?: true
    url?: true
  }

  export type GalleryImageMaxAggregateInputType = {
    title?: true
    url?: true
  }

  export type GalleryImageCountAggregateInputType = {
    title?: true
    url?: true
    _all?: true
  }

  export type GalleryImageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GalleryImage to aggregate.
     */
    where?: GalleryImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GalleryImages to fetch.
     */
    orderBy?: Enumerable<GalleryImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GalleryImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GalleryImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GalleryImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GalleryImages
    **/
    _count?: true | GalleryImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GalleryImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GalleryImageMaxAggregateInputType
  }

  export type GetGalleryImageAggregateType<T extends GalleryImageAggregateArgs> = {
        [P in keyof T & keyof AggregateGalleryImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGalleryImage[P]>
      : GetScalarType<T[P], AggregateGalleryImage[P]>
  }




  export type GalleryImageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GalleryImageWhereInput
    orderBy?: Enumerable<GalleryImageOrderByWithAggregationInput>
    by: GalleryImageScalarFieldEnum[]
    having?: GalleryImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GalleryImageCountAggregateInputType | true
    _min?: GalleryImageMinAggregateInputType
    _max?: GalleryImageMaxAggregateInputType
  }


  export type GalleryImageGroupByOutputType = {
    title: string
    url: string
    _count: GalleryImageCountAggregateOutputType | null
    _min: GalleryImageMinAggregateOutputType | null
    _max: GalleryImageMaxAggregateOutputType | null
  }

  type GetGalleryImageGroupByPayload<T extends GalleryImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GalleryImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GalleryImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GalleryImageGroupByOutputType[P]>
            : GetScalarType<T[P], GalleryImageGroupByOutputType[P]>
        }
      >
    >


  export type GalleryImageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    title?: boolean
    url?: boolean
  }, ExtArgs["result"]["galleryImage"]>

  export type GalleryImageSelectScalar = {
    title?: boolean
    url?: boolean
  }


  type GalleryImageGetPayload<S extends boolean | null | undefined | GalleryImageArgs> = $Types.GetResult<GalleryImagePayload, S>

  type GalleryImageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GalleryImageFindManyArgs, 'select' | 'include'> & {
      select?: GalleryImageCountAggregateInputType | true
    }

  export interface GalleryImageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GalleryImage'], meta: { name: 'GalleryImage' } }
    /**
     * Find zero or one GalleryImage that matches the filter.
     * @param {GalleryImageFindUniqueArgs} args - Arguments to find a GalleryImage
     * @example
     * // Get one GalleryImage
     * const galleryImage = await prisma.galleryImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GalleryImageFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GalleryImageFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GalleryImage'> extends True ? Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one GalleryImage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GalleryImageFindUniqueOrThrowArgs} args - Arguments to find a GalleryImage
     * @example
     * // Get one GalleryImage
     * const galleryImage = await prisma.galleryImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GalleryImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GalleryImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first GalleryImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalleryImageFindFirstArgs} args - Arguments to find a GalleryImage
     * @example
     * // Get one GalleryImage
     * const galleryImage = await prisma.galleryImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GalleryImageFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GalleryImageFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GalleryImage'> extends True ? Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first GalleryImage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalleryImageFindFirstOrThrowArgs} args - Arguments to find a GalleryImage
     * @example
     * // Get one GalleryImage
     * const galleryImage = await prisma.galleryImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GalleryImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GalleryImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more GalleryImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalleryImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GalleryImages
     * const galleryImages = await prisma.galleryImage.findMany()
     * 
     * // Get first 10 GalleryImages
     * const galleryImages = await prisma.galleryImage.findMany({ take: 10 })
     * 
     * // Only select the `title`
     * const galleryImageWithTitleOnly = await prisma.galleryImage.findMany({ select: { title: true } })
     * 
    **/
    findMany<T extends GalleryImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GalleryImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a GalleryImage.
     * @param {GalleryImageCreateArgs} args - Arguments to create a GalleryImage.
     * @example
     * // Create one GalleryImage
     * const GalleryImage = await prisma.galleryImage.create({
     *   data: {
     *     // ... data to create a GalleryImage
     *   }
     * })
     * 
    **/
    create<T extends GalleryImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GalleryImageCreateArgs<ExtArgs>>
    ): Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a GalleryImage.
     * @param {GalleryImageDeleteArgs} args - Arguments to delete one GalleryImage.
     * @example
     * // Delete one GalleryImage
     * const GalleryImage = await prisma.galleryImage.delete({
     *   where: {
     *     // ... filter to delete one GalleryImage
     *   }
     * })
     * 
    **/
    delete<T extends GalleryImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GalleryImageDeleteArgs<ExtArgs>>
    ): Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one GalleryImage.
     * @param {GalleryImageUpdateArgs} args - Arguments to update one GalleryImage.
     * @example
     * // Update one GalleryImage
     * const galleryImage = await prisma.galleryImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GalleryImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GalleryImageUpdateArgs<ExtArgs>>
    ): Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more GalleryImages.
     * @param {GalleryImageDeleteManyArgs} args - Arguments to filter GalleryImages to delete.
     * @example
     * // Delete a few GalleryImages
     * const { count } = await prisma.galleryImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GalleryImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GalleryImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GalleryImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalleryImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GalleryImages
     * const galleryImage = await prisma.galleryImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GalleryImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GalleryImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GalleryImage.
     * @param {GalleryImageUpsertArgs} args - Arguments to update or create a GalleryImage.
     * @example
     * // Update or create a GalleryImage
     * const galleryImage = await prisma.galleryImage.upsert({
     *   create: {
     *     // ... data to create a GalleryImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GalleryImage we want to update
     *   }
     * })
    **/
    upsert<T extends GalleryImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GalleryImageUpsertArgs<ExtArgs>>
    ): Prisma__GalleryImageClient<$Types.GetResult<GalleryImagePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of GalleryImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalleryImageCountArgs} args - Arguments to filter GalleryImages to count.
     * @example
     * // Count the number of GalleryImages
     * const count = await prisma.galleryImage.count({
     *   where: {
     *     // ... the filter for the GalleryImages we want to count
     *   }
     * })
    **/
    count<T extends GalleryImageCountArgs>(
      args?: Subset<T, GalleryImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GalleryImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GalleryImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalleryImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GalleryImageAggregateArgs>(args: Subset<T, GalleryImageAggregateArgs>): Prisma.PrismaPromise<GetGalleryImageAggregateType<T>>

    /**
     * Group by GalleryImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GalleryImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GalleryImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GalleryImageGroupByArgs['orderBy'] }
        : { orderBy?: GalleryImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GalleryImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGalleryImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GalleryImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GalleryImageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GalleryImage base type for findUnique actions
   */
  export type GalleryImageFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
    /**
     * Filter, which GalleryImage to fetch.
     */
    where: GalleryImageWhereUniqueInput
  }

  /**
   * GalleryImage findUnique
   */
  export interface GalleryImageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GalleryImageFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GalleryImage findUniqueOrThrow
   */
  export type GalleryImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
    /**
     * Filter, which GalleryImage to fetch.
     */
    where: GalleryImageWhereUniqueInput
  }


  /**
   * GalleryImage base type for findFirst actions
   */
  export type GalleryImageFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
    /**
     * Filter, which GalleryImage to fetch.
     */
    where?: GalleryImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GalleryImages to fetch.
     */
    orderBy?: Enumerable<GalleryImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GalleryImages.
     */
    cursor?: GalleryImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GalleryImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GalleryImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GalleryImages.
     */
    distinct?: Enumerable<GalleryImageScalarFieldEnum>
  }

  /**
   * GalleryImage findFirst
   */
  export interface GalleryImageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GalleryImageFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GalleryImage findFirstOrThrow
   */
  export type GalleryImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
    /**
     * Filter, which GalleryImage to fetch.
     */
    where?: GalleryImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GalleryImages to fetch.
     */
    orderBy?: Enumerable<GalleryImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GalleryImages.
     */
    cursor?: GalleryImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GalleryImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GalleryImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GalleryImages.
     */
    distinct?: Enumerable<GalleryImageScalarFieldEnum>
  }


  /**
   * GalleryImage findMany
   */
  export type GalleryImageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
    /**
     * Filter, which GalleryImages to fetch.
     */
    where?: GalleryImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GalleryImages to fetch.
     */
    orderBy?: Enumerable<GalleryImageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GalleryImages.
     */
    cursor?: GalleryImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GalleryImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GalleryImages.
     */
    skip?: number
    distinct?: Enumerable<GalleryImageScalarFieldEnum>
  }


  /**
   * GalleryImage create
   */
  export type GalleryImageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
    /**
     * The data needed to create a GalleryImage.
     */
    data: XOR<GalleryImageCreateInput, GalleryImageUncheckedCreateInput>
  }


  /**
   * GalleryImage update
   */
  export type GalleryImageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
    /**
     * The data needed to update a GalleryImage.
     */
    data: XOR<GalleryImageUpdateInput, GalleryImageUncheckedUpdateInput>
    /**
     * Choose, which GalleryImage to update.
     */
    where: GalleryImageWhereUniqueInput
  }


  /**
   * GalleryImage updateMany
   */
  export type GalleryImageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GalleryImages.
     */
    data: XOR<GalleryImageUpdateManyMutationInput, GalleryImageUncheckedUpdateManyInput>
    /**
     * Filter which GalleryImages to update
     */
    where?: GalleryImageWhereInput
  }


  /**
   * GalleryImage upsert
   */
  export type GalleryImageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
    /**
     * The filter to search for the GalleryImage to update in case it exists.
     */
    where: GalleryImageWhereUniqueInput
    /**
     * In case the GalleryImage found by the `where` argument doesn't exist, create a new GalleryImage with this data.
     */
    create: XOR<GalleryImageCreateInput, GalleryImageUncheckedCreateInput>
    /**
     * In case the GalleryImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GalleryImageUpdateInput, GalleryImageUncheckedUpdateInput>
  }


  /**
   * GalleryImage delete
   */
  export type GalleryImageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
    /**
     * Filter which GalleryImage to delete.
     */
    where: GalleryImageWhereUniqueInput
  }


  /**
   * GalleryImage deleteMany
   */
  export type GalleryImageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which GalleryImages to delete
     */
    where?: GalleryImageWhereInput
  }


  /**
   * GalleryImage without action
   */
  export type GalleryImageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GalleryImage
     */
    select?: GalleryImageSelect<ExtArgs> | null
  }



  /**
   * Model MagicRune
   */


  export type AggregateMagicRune = {
    _count: MagicRuneCountAggregateOutputType | null
    _min: MagicRuneMinAggregateOutputType | null
    _max: MagicRuneMaxAggregateOutputType | null
  }

  export type MagicRuneMinAggregateOutputType = {
    name: string | null
    baseName: string | null
    src: string | null
    branch: string | null
    description: string | null
    advancedDescription: string | null
  }

  export type MagicRuneMaxAggregateOutputType = {
    name: string | null
    baseName: string | null
    src: string | null
    branch: string | null
    description: string | null
    advancedDescription: string | null
  }

  export type MagicRuneCountAggregateOutputType = {
    name: number
    baseName: number
    src: number
    branch: number
    description: number
    advancedDescription: number
    _all: number
  }


  export type MagicRuneMinAggregateInputType = {
    name?: true
    baseName?: true
    src?: true
    branch?: true
    description?: true
    advancedDescription?: true
  }

  export type MagicRuneMaxAggregateInputType = {
    name?: true
    baseName?: true
    src?: true
    branch?: true
    description?: true
    advancedDescription?: true
  }

  export type MagicRuneCountAggregateInputType = {
    name?: true
    baseName?: true
    src?: true
    branch?: true
    description?: true
    advancedDescription?: true
    _all?: true
  }

  export type MagicRuneAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MagicRune to aggregate.
     */
    where?: MagicRuneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MagicRunes to fetch.
     */
    orderBy?: Enumerable<MagicRuneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MagicRuneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MagicRunes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MagicRunes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MagicRunes
    **/
    _count?: true | MagicRuneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MagicRuneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MagicRuneMaxAggregateInputType
  }

  export type GetMagicRuneAggregateType<T extends MagicRuneAggregateArgs> = {
        [P in keyof T & keyof AggregateMagicRune]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMagicRune[P]>
      : GetScalarType<T[P], AggregateMagicRune[P]>
  }




  export type MagicRuneGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MagicRuneWhereInput
    orderBy?: Enumerable<MagicRuneOrderByWithAggregationInput>
    by: MagicRuneScalarFieldEnum[]
    having?: MagicRuneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MagicRuneCountAggregateInputType | true
    _min?: MagicRuneMinAggregateInputType
    _max?: MagicRuneMaxAggregateInputType
  }


  export type MagicRuneGroupByOutputType = {
    name: string
    baseName: string
    src: string
    branch: string
    description: string
    advancedDescription: string
    _count: MagicRuneCountAggregateOutputType | null
    _min: MagicRuneMinAggregateOutputType | null
    _max: MagicRuneMaxAggregateOutputType | null
  }

  type GetMagicRuneGroupByPayload<T extends MagicRuneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MagicRuneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MagicRuneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MagicRuneGroupByOutputType[P]>
            : GetScalarType<T[P], MagicRuneGroupByOutputType[P]>
        }
      >
    >


  export type MagicRuneSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    baseName?: boolean
    src?: boolean
    branch?: boolean
    description?: boolean
    advancedDescription?: boolean
  }, ExtArgs["result"]["magicRune"]>

  export type MagicRuneSelectScalar = {
    name?: boolean
    baseName?: boolean
    src?: boolean
    branch?: boolean
    description?: boolean
    advancedDescription?: boolean
  }


  type MagicRuneGetPayload<S extends boolean | null | undefined | MagicRuneArgs> = $Types.GetResult<MagicRunePayload, S>

  type MagicRuneCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MagicRuneFindManyArgs, 'select' | 'include'> & {
      select?: MagicRuneCountAggregateInputType | true
    }

  export interface MagicRuneDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MagicRune'], meta: { name: 'MagicRune' } }
    /**
     * Find zero or one MagicRune that matches the filter.
     * @param {MagicRuneFindUniqueArgs} args - Arguments to find a MagicRune
     * @example
     * // Get one MagicRune
     * const magicRune = await prisma.magicRune.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MagicRuneFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MagicRuneFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MagicRune'> extends True ? Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one MagicRune that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MagicRuneFindUniqueOrThrowArgs} args - Arguments to find a MagicRune
     * @example
     * // Get one MagicRune
     * const magicRune = await prisma.magicRune.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MagicRuneFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MagicRuneFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first MagicRune that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagicRuneFindFirstArgs} args - Arguments to find a MagicRune
     * @example
     * // Get one MagicRune
     * const magicRune = await prisma.magicRune.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MagicRuneFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MagicRuneFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MagicRune'> extends True ? Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first MagicRune that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagicRuneFindFirstOrThrowArgs} args - Arguments to find a MagicRune
     * @example
     * // Get one MagicRune
     * const magicRune = await prisma.magicRune.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MagicRuneFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MagicRuneFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more MagicRunes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagicRuneFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MagicRunes
     * const magicRunes = await prisma.magicRune.findMany()
     * 
     * // Get first 10 MagicRunes
     * const magicRunes = await prisma.magicRune.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const magicRuneWithNameOnly = await prisma.magicRune.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends MagicRuneFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MagicRuneFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a MagicRune.
     * @param {MagicRuneCreateArgs} args - Arguments to create a MagicRune.
     * @example
     * // Create one MagicRune
     * const MagicRune = await prisma.magicRune.create({
     *   data: {
     *     // ... data to create a MagicRune
     *   }
     * })
     * 
    **/
    create<T extends MagicRuneCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MagicRuneCreateArgs<ExtArgs>>
    ): Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a MagicRune.
     * @param {MagicRuneDeleteArgs} args - Arguments to delete one MagicRune.
     * @example
     * // Delete one MagicRune
     * const MagicRune = await prisma.magicRune.delete({
     *   where: {
     *     // ... filter to delete one MagicRune
     *   }
     * })
     * 
    **/
    delete<T extends MagicRuneDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MagicRuneDeleteArgs<ExtArgs>>
    ): Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one MagicRune.
     * @param {MagicRuneUpdateArgs} args - Arguments to update one MagicRune.
     * @example
     * // Update one MagicRune
     * const magicRune = await prisma.magicRune.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MagicRuneUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MagicRuneUpdateArgs<ExtArgs>>
    ): Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more MagicRunes.
     * @param {MagicRuneDeleteManyArgs} args - Arguments to filter MagicRunes to delete.
     * @example
     * // Delete a few MagicRunes
     * const { count } = await prisma.magicRune.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MagicRuneDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MagicRuneDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MagicRunes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagicRuneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MagicRunes
     * const magicRune = await prisma.magicRune.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MagicRuneUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MagicRuneUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MagicRune.
     * @param {MagicRuneUpsertArgs} args - Arguments to update or create a MagicRune.
     * @example
     * // Update or create a MagicRune
     * const magicRune = await prisma.magicRune.upsert({
     *   create: {
     *     // ... data to create a MagicRune
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MagicRune we want to update
     *   }
     * })
    **/
    upsert<T extends MagicRuneUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MagicRuneUpsertArgs<ExtArgs>>
    ): Prisma__MagicRuneClient<$Types.GetResult<MagicRunePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of MagicRunes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagicRuneCountArgs} args - Arguments to filter MagicRunes to count.
     * @example
     * // Count the number of MagicRunes
     * const count = await prisma.magicRune.count({
     *   where: {
     *     // ... the filter for the MagicRunes we want to count
     *   }
     * })
    **/
    count<T extends MagicRuneCountArgs>(
      args?: Subset<T, MagicRuneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MagicRuneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MagicRune.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagicRuneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MagicRuneAggregateArgs>(args: Subset<T, MagicRuneAggregateArgs>): Prisma.PrismaPromise<GetMagicRuneAggregateType<T>>

    /**
     * Group by MagicRune.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MagicRuneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MagicRuneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MagicRuneGroupByArgs['orderBy'] }
        : { orderBy?: MagicRuneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MagicRuneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMagicRuneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MagicRune.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MagicRuneClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MagicRune base type for findUnique actions
   */
  export type MagicRuneFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
    /**
     * Filter, which MagicRune to fetch.
     */
    where: MagicRuneWhereUniqueInput
  }

  /**
   * MagicRune findUnique
   */
  export interface MagicRuneFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MagicRuneFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MagicRune findUniqueOrThrow
   */
  export type MagicRuneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
    /**
     * Filter, which MagicRune to fetch.
     */
    where: MagicRuneWhereUniqueInput
  }


  /**
   * MagicRune base type for findFirst actions
   */
  export type MagicRuneFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
    /**
     * Filter, which MagicRune to fetch.
     */
    where?: MagicRuneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MagicRunes to fetch.
     */
    orderBy?: Enumerable<MagicRuneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MagicRunes.
     */
    cursor?: MagicRuneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MagicRunes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MagicRunes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MagicRunes.
     */
    distinct?: Enumerable<MagicRuneScalarFieldEnum>
  }

  /**
   * MagicRune findFirst
   */
  export interface MagicRuneFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MagicRuneFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MagicRune findFirstOrThrow
   */
  export type MagicRuneFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
    /**
     * Filter, which MagicRune to fetch.
     */
    where?: MagicRuneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MagicRunes to fetch.
     */
    orderBy?: Enumerable<MagicRuneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MagicRunes.
     */
    cursor?: MagicRuneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MagicRunes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MagicRunes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MagicRunes.
     */
    distinct?: Enumerable<MagicRuneScalarFieldEnum>
  }


  /**
   * MagicRune findMany
   */
  export type MagicRuneFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
    /**
     * Filter, which MagicRunes to fetch.
     */
    where?: MagicRuneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MagicRunes to fetch.
     */
    orderBy?: Enumerable<MagicRuneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MagicRunes.
     */
    cursor?: MagicRuneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MagicRunes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MagicRunes.
     */
    skip?: number
    distinct?: Enumerable<MagicRuneScalarFieldEnum>
  }


  /**
   * MagicRune create
   */
  export type MagicRuneCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
    /**
     * The data needed to create a MagicRune.
     */
    data: XOR<MagicRuneCreateInput, MagicRuneUncheckedCreateInput>
  }


  /**
   * MagicRune update
   */
  export type MagicRuneUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
    /**
     * The data needed to update a MagicRune.
     */
    data: XOR<MagicRuneUpdateInput, MagicRuneUncheckedUpdateInput>
    /**
     * Choose, which MagicRune to update.
     */
    where: MagicRuneWhereUniqueInput
  }


  /**
   * MagicRune updateMany
   */
  export type MagicRuneUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MagicRunes.
     */
    data: XOR<MagicRuneUpdateManyMutationInput, MagicRuneUncheckedUpdateManyInput>
    /**
     * Filter which MagicRunes to update
     */
    where?: MagicRuneWhereInput
  }


  /**
   * MagicRune upsert
   */
  export type MagicRuneUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
    /**
     * The filter to search for the MagicRune to update in case it exists.
     */
    where: MagicRuneWhereUniqueInput
    /**
     * In case the MagicRune found by the `where` argument doesn't exist, create a new MagicRune with this data.
     */
    create: XOR<MagicRuneCreateInput, MagicRuneUncheckedCreateInput>
    /**
     * In case the MagicRune was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MagicRuneUpdateInput, MagicRuneUncheckedUpdateInput>
  }


  /**
   * MagicRune delete
   */
  export type MagicRuneDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
    /**
     * Filter which MagicRune to delete.
     */
    where: MagicRuneWhereUniqueInput
  }


  /**
   * MagicRune deleteMany
   */
  export type MagicRuneDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MagicRunes to delete
     */
    where?: MagicRuneWhereInput
  }


  /**
   * MagicRune without action
   */
  export type MagicRuneArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MagicRune
     */
    select?: MagicRuneSelect<ExtArgs> | null
  }



  /**
   * Model CharacterCanon
   */


  export type AggregateCharacterCanon = {
    _count: CharacterCanonCountAggregateOutputType | null
    _avg: CharacterCanonAvgAggregateOutputType | null
    _sum: CharacterCanonSumAggregateOutputType | null
    _min: CharacterCanonMinAggregateOutputType | null
    _max: CharacterCanonMaxAggregateOutputType | null
  }

  export type CharacterCanonAvgAggregateOutputType = {
    id: number | null
  }

  export type CharacterCanonSumAggregateOutputType = {
    id: number | null
  }

  export type CharacterCanonMinAggregateOutputType = {
    id: number | null
    name: string | null
    subtitle: string | null
    filter: string | null
    href: string | null
    src: string | null
    author: string | null
    age: string | null
    nation: string | null
    class: string | null
    occupation: string | null
    quests: string | null
  }

  export type CharacterCanonMaxAggregateOutputType = {
    id: number | null
    name: string | null
    subtitle: string | null
    filter: string | null
    href: string | null
    src: string | null
    author: string | null
    age: string | null
    nation: string | null
    class: string | null
    occupation: string | null
    quests: string | null
  }

  export type CharacterCanonCountAggregateOutputType = {
    id: number
    name: number
    subtitle: number
    filter: number
    href: number
    src: number
    author: number
    age: number
    nation: number
    class: number
    occupation: number
    quests: number
    _all: number
  }


  export type CharacterCanonAvgAggregateInputType = {
    id?: true
  }

  export type CharacterCanonSumAggregateInputType = {
    id?: true
  }

  export type CharacterCanonMinAggregateInputType = {
    id?: true
    name?: true
    subtitle?: true
    filter?: true
    href?: true
    src?: true
    author?: true
    age?: true
    nation?: true
    class?: true
    occupation?: true
    quests?: true
  }

  export type CharacterCanonMaxAggregateInputType = {
    id?: true
    name?: true
    subtitle?: true
    filter?: true
    href?: true
    src?: true
    author?: true
    age?: true
    nation?: true
    class?: true
    occupation?: true
    quests?: true
  }

  export type CharacterCanonCountAggregateInputType = {
    id?: true
    name?: true
    subtitle?: true
    filter?: true
    href?: true
    src?: true
    author?: true
    age?: true
    nation?: true
    class?: true
    occupation?: true
    quests?: true
    _all?: true
  }

  export type CharacterCanonAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterCanon to aggregate.
     */
    where?: CharacterCanonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterCanons to fetch.
     */
    orderBy?: Enumerable<CharacterCanonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterCanonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterCanons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterCanons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CharacterCanons
    **/
    _count?: true | CharacterCanonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterCanonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterCanonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterCanonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterCanonMaxAggregateInputType
  }

  export type GetCharacterCanonAggregateType<T extends CharacterCanonAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacterCanon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacterCanon[P]>
      : GetScalarType<T[P], AggregateCharacterCanon[P]>
  }




  export type CharacterCanonGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CharacterCanonWhereInput
    orderBy?: Enumerable<CharacterCanonOrderByWithAggregationInput>
    by: CharacterCanonScalarFieldEnum[]
    having?: CharacterCanonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterCanonCountAggregateInputType | true
    _avg?: CharacterCanonAvgAggregateInputType
    _sum?: CharacterCanonSumAggregateInputType
    _min?: CharacterCanonMinAggregateInputType
    _max?: CharacterCanonMaxAggregateInputType
  }


  export type CharacterCanonGroupByOutputType = {
    id: number
    name: string
    subtitle: string | null
    filter: string | null
    href: string | null
    src: string | null
    author: string | null
    age: string | null
    nation: string | null
    class: string | null
    occupation: string | null
    quests: string | null
    _count: CharacterCanonCountAggregateOutputType | null
    _avg: CharacterCanonAvgAggregateOutputType | null
    _sum: CharacterCanonSumAggregateOutputType | null
    _min: CharacterCanonMinAggregateOutputType | null
    _max: CharacterCanonMaxAggregateOutputType | null
  }

  type GetCharacterCanonGroupByPayload<T extends CharacterCanonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CharacterCanonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterCanonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterCanonGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterCanonGroupByOutputType[P]>
        }
      >
    >


  export type CharacterCanonSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subtitle?: boolean
    filter?: boolean
    href?: boolean
    src?: boolean
    author?: boolean
    age?: boolean
    nation?: boolean
    class?: boolean
    occupation?: boolean
    quests?: boolean
  }, ExtArgs["result"]["characterCanon"]>

  export type CharacterCanonSelectScalar = {
    id?: boolean
    name?: boolean
    subtitle?: boolean
    filter?: boolean
    href?: boolean
    src?: boolean
    author?: boolean
    age?: boolean
    nation?: boolean
    class?: boolean
    occupation?: boolean
    quests?: boolean
  }


  type CharacterCanonGetPayload<S extends boolean | null | undefined | CharacterCanonArgs> = $Types.GetResult<CharacterCanonPayload, S>

  type CharacterCanonCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CharacterCanonFindManyArgs, 'select' | 'include'> & {
      select?: CharacterCanonCountAggregateInputType | true
    }

  export interface CharacterCanonDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CharacterCanon'], meta: { name: 'CharacterCanon' } }
    /**
     * Find zero or one CharacterCanon that matches the filter.
     * @param {CharacterCanonFindUniqueArgs} args - Arguments to find a CharacterCanon
     * @example
     * // Get one CharacterCanon
     * const characterCanon = await prisma.characterCanon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CharacterCanonFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CharacterCanonFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CharacterCanon'> extends True ? Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CharacterCanon that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CharacterCanonFindUniqueOrThrowArgs} args - Arguments to find a CharacterCanon
     * @example
     * // Get one CharacterCanon
     * const characterCanon = await prisma.characterCanon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CharacterCanonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterCanonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CharacterCanon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCanonFindFirstArgs} args - Arguments to find a CharacterCanon
     * @example
     * // Get one CharacterCanon
     * const characterCanon = await prisma.characterCanon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CharacterCanonFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CharacterCanonFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CharacterCanon'> extends True ? Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CharacterCanon that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCanonFindFirstOrThrowArgs} args - Arguments to find a CharacterCanon
     * @example
     * // Get one CharacterCanon
     * const characterCanon = await prisma.characterCanon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CharacterCanonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterCanonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CharacterCanons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCanonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CharacterCanons
     * const characterCanons = await prisma.characterCanon.findMany()
     * 
     * // Get first 10 CharacterCanons
     * const characterCanons = await prisma.characterCanon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterCanonWithIdOnly = await prisma.characterCanon.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CharacterCanonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterCanonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CharacterCanon.
     * @param {CharacterCanonCreateArgs} args - Arguments to create a CharacterCanon.
     * @example
     * // Create one CharacterCanon
     * const CharacterCanon = await prisma.characterCanon.create({
     *   data: {
     *     // ... data to create a CharacterCanon
     *   }
     * })
     * 
    **/
    create<T extends CharacterCanonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterCanonCreateArgs<ExtArgs>>
    ): Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a CharacterCanon.
     * @param {CharacterCanonDeleteArgs} args - Arguments to delete one CharacterCanon.
     * @example
     * // Delete one CharacterCanon
     * const CharacterCanon = await prisma.characterCanon.delete({
     *   where: {
     *     // ... filter to delete one CharacterCanon
     *   }
     * })
     * 
    **/
    delete<T extends CharacterCanonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterCanonDeleteArgs<ExtArgs>>
    ): Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CharacterCanon.
     * @param {CharacterCanonUpdateArgs} args - Arguments to update one CharacterCanon.
     * @example
     * // Update one CharacterCanon
     * const characterCanon = await prisma.characterCanon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CharacterCanonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterCanonUpdateArgs<ExtArgs>>
    ): Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CharacterCanons.
     * @param {CharacterCanonDeleteManyArgs} args - Arguments to filter CharacterCanons to delete.
     * @example
     * // Delete a few CharacterCanons
     * const { count } = await prisma.characterCanon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CharacterCanonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterCanonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CharacterCanons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCanonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CharacterCanons
     * const characterCanon = await prisma.characterCanon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CharacterCanonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterCanonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CharacterCanon.
     * @param {CharacterCanonUpsertArgs} args - Arguments to update or create a CharacterCanon.
     * @example
     * // Update or create a CharacterCanon
     * const characterCanon = await prisma.characterCanon.upsert({
     *   create: {
     *     // ... data to create a CharacterCanon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CharacterCanon we want to update
     *   }
     * })
    **/
    upsert<T extends CharacterCanonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterCanonUpsertArgs<ExtArgs>>
    ): Prisma__CharacterCanonClient<$Types.GetResult<CharacterCanonPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CharacterCanons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCanonCountArgs} args - Arguments to filter CharacterCanons to count.
     * @example
     * // Count the number of CharacterCanons
     * const count = await prisma.characterCanon.count({
     *   where: {
     *     // ... the filter for the CharacterCanons we want to count
     *   }
     * })
    **/
    count<T extends CharacterCanonCountArgs>(
      args?: Subset<T, CharacterCanonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterCanonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CharacterCanon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCanonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterCanonAggregateArgs>(args: Subset<T, CharacterCanonAggregateArgs>): Prisma.PrismaPromise<GetCharacterCanonAggregateType<T>>

    /**
     * Group by CharacterCanon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCanonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterCanonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterCanonGroupByArgs['orderBy'] }
        : { orderBy?: CharacterCanonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterCanonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterCanonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CharacterCanon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CharacterCanonClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CharacterCanon base type for findUnique actions
   */
  export type CharacterCanonFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
    /**
     * Filter, which CharacterCanon to fetch.
     */
    where: CharacterCanonWhereUniqueInput
  }

  /**
   * CharacterCanon findUnique
   */
  export interface CharacterCanonFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CharacterCanonFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CharacterCanon findUniqueOrThrow
   */
  export type CharacterCanonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
    /**
     * Filter, which CharacterCanon to fetch.
     */
    where: CharacterCanonWhereUniqueInput
  }


  /**
   * CharacterCanon base type for findFirst actions
   */
  export type CharacterCanonFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
    /**
     * Filter, which CharacterCanon to fetch.
     */
    where?: CharacterCanonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterCanons to fetch.
     */
    orderBy?: Enumerable<CharacterCanonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterCanons.
     */
    cursor?: CharacterCanonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterCanons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterCanons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterCanons.
     */
    distinct?: Enumerable<CharacterCanonScalarFieldEnum>
  }

  /**
   * CharacterCanon findFirst
   */
  export interface CharacterCanonFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CharacterCanonFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CharacterCanon findFirstOrThrow
   */
  export type CharacterCanonFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
    /**
     * Filter, which CharacterCanon to fetch.
     */
    where?: CharacterCanonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterCanons to fetch.
     */
    orderBy?: Enumerable<CharacterCanonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterCanons.
     */
    cursor?: CharacterCanonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterCanons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterCanons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterCanons.
     */
    distinct?: Enumerable<CharacterCanonScalarFieldEnum>
  }


  /**
   * CharacterCanon findMany
   */
  export type CharacterCanonFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
    /**
     * Filter, which CharacterCanons to fetch.
     */
    where?: CharacterCanonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterCanons to fetch.
     */
    orderBy?: Enumerable<CharacterCanonOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CharacterCanons.
     */
    cursor?: CharacterCanonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterCanons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterCanons.
     */
    skip?: number
    distinct?: Enumerable<CharacterCanonScalarFieldEnum>
  }


  /**
   * CharacterCanon create
   */
  export type CharacterCanonCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
    /**
     * The data needed to create a CharacterCanon.
     */
    data: XOR<CharacterCanonCreateInput, CharacterCanonUncheckedCreateInput>
  }


  /**
   * CharacterCanon update
   */
  export type CharacterCanonUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
    /**
     * The data needed to update a CharacterCanon.
     */
    data: XOR<CharacterCanonUpdateInput, CharacterCanonUncheckedUpdateInput>
    /**
     * Choose, which CharacterCanon to update.
     */
    where: CharacterCanonWhereUniqueInput
  }


  /**
   * CharacterCanon updateMany
   */
  export type CharacterCanonUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CharacterCanons.
     */
    data: XOR<CharacterCanonUpdateManyMutationInput, CharacterCanonUncheckedUpdateManyInput>
    /**
     * Filter which CharacterCanons to update
     */
    where?: CharacterCanonWhereInput
  }


  /**
   * CharacterCanon upsert
   */
  export type CharacterCanonUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
    /**
     * The filter to search for the CharacterCanon to update in case it exists.
     */
    where: CharacterCanonWhereUniqueInput
    /**
     * In case the CharacterCanon found by the `where` argument doesn't exist, create a new CharacterCanon with this data.
     */
    create: XOR<CharacterCanonCreateInput, CharacterCanonUncheckedCreateInput>
    /**
     * In case the CharacterCanon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterCanonUpdateInput, CharacterCanonUncheckedUpdateInput>
  }


  /**
   * CharacterCanon delete
   */
  export type CharacterCanonDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
    /**
     * Filter which CharacterCanon to delete.
     */
    where: CharacterCanonWhereUniqueInput
  }


  /**
   * CharacterCanon deleteMany
   */
  export type CharacterCanonDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterCanons to delete
     */
    where?: CharacterCanonWhereInput
  }


  /**
   * CharacterCanon without action
   */
  export type CharacterCanonArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterCanon
     */
    select?: CharacterCanonSelect<ExtArgs> | null
  }



  /**
   * Model CharacterHero
   */


  export type AggregateCharacterHero = {
    _count: CharacterHeroCountAggregateOutputType | null
    _avg: CharacterHeroAvgAggregateOutputType | null
    _sum: CharacterHeroSumAggregateOutputType | null
    _min: CharacterHeroMinAggregateOutputType | null
    _max: CharacterHeroMaxAggregateOutputType | null
  }

  export type CharacterHeroAvgAggregateOutputType = {
    id: number | null
  }

  export type CharacterHeroSumAggregateOutputType = {
    id: number | null
  }

  export type CharacterHeroMinAggregateOutputType = {
    id: number | null
    name: string | null
    subtitle: string | null
    filter: string | null
    href: string | null
    src: string | null
    age: string | null
    nation: string | null
    class: string | null
    player: string | null
    occupation: string | null
    quests: string | null
  }

  export type CharacterHeroMaxAggregateOutputType = {
    id: number | null
    name: string | null
    subtitle: string | null
    filter: string | null
    href: string | null
    src: string | null
    age: string | null
    nation: string | null
    class: string | null
    player: string | null
    occupation: string | null
    quests: string | null
  }

  export type CharacterHeroCountAggregateOutputType = {
    id: number
    name: number
    subtitle: number
    filter: number
    href: number
    src: number
    age: number
    nation: number
    class: number
    player: number
    occupation: number
    quests: number
    _all: number
  }


  export type CharacterHeroAvgAggregateInputType = {
    id?: true
  }

  export type CharacterHeroSumAggregateInputType = {
    id?: true
  }

  export type CharacterHeroMinAggregateInputType = {
    id?: true
    name?: true
    subtitle?: true
    filter?: true
    href?: true
    src?: true
    age?: true
    nation?: true
    class?: true
    player?: true
    occupation?: true
    quests?: true
  }

  export type CharacterHeroMaxAggregateInputType = {
    id?: true
    name?: true
    subtitle?: true
    filter?: true
    href?: true
    src?: true
    age?: true
    nation?: true
    class?: true
    player?: true
    occupation?: true
    quests?: true
  }

  export type CharacterHeroCountAggregateInputType = {
    id?: true
    name?: true
    subtitle?: true
    filter?: true
    href?: true
    src?: true
    age?: true
    nation?: true
    class?: true
    player?: true
    occupation?: true
    quests?: true
    _all?: true
  }

  export type CharacterHeroAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterHero to aggregate.
     */
    where?: CharacterHeroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterHeroes to fetch.
     */
    orderBy?: Enumerable<CharacterHeroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CharacterHeroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterHeroes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterHeroes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CharacterHeroes
    **/
    _count?: true | CharacterHeroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterHeroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterHeroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterHeroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterHeroMaxAggregateInputType
  }

  export type GetCharacterHeroAggregateType<T extends CharacterHeroAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacterHero]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacterHero[P]>
      : GetScalarType<T[P], AggregateCharacterHero[P]>
  }




  export type CharacterHeroGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CharacterHeroWhereInput
    orderBy?: Enumerable<CharacterHeroOrderByWithAggregationInput>
    by: CharacterHeroScalarFieldEnum[]
    having?: CharacterHeroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterHeroCountAggregateInputType | true
    _avg?: CharacterHeroAvgAggregateInputType
    _sum?: CharacterHeroSumAggregateInputType
    _min?: CharacterHeroMinAggregateInputType
    _max?: CharacterHeroMaxAggregateInputType
  }


  export type CharacterHeroGroupByOutputType = {
    id: number
    name: string
    subtitle: string | null
    filter: string | null
    href: string | null
    src: string | null
    age: string | null
    nation: string | null
    class: string | null
    player: string | null
    occupation: string | null
    quests: string | null
    _count: CharacterHeroCountAggregateOutputType | null
    _avg: CharacterHeroAvgAggregateOutputType | null
    _sum: CharacterHeroSumAggregateOutputType | null
    _min: CharacterHeroMinAggregateOutputType | null
    _max: CharacterHeroMaxAggregateOutputType | null
  }

  type GetCharacterHeroGroupByPayload<T extends CharacterHeroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CharacterHeroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterHeroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterHeroGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterHeroGroupByOutputType[P]>
        }
      >
    >


  export type CharacterHeroSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subtitle?: boolean
    filter?: boolean
    href?: boolean
    src?: boolean
    age?: boolean
    nation?: boolean
    class?: boolean
    player?: boolean
    occupation?: boolean
    quests?: boolean
    relations?: boolean | FactionRelationArgs<ExtArgs>
  }, ExtArgs["result"]["characterHero"]>

  export type CharacterHeroSelectScalar = {
    id?: boolean
    name?: boolean
    subtitle?: boolean
    filter?: boolean
    href?: boolean
    src?: boolean
    age?: boolean
    nation?: boolean
    class?: boolean
    player?: boolean
    occupation?: boolean
    quests?: boolean
  }

  export type CharacterHeroInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    relations?: boolean | FactionRelationArgs<ExtArgs>
  }


  type CharacterHeroGetPayload<S extends boolean | null | undefined | CharacterHeroArgs> = $Types.GetResult<CharacterHeroPayload, S>

  type CharacterHeroCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CharacterHeroFindManyArgs, 'select' | 'include'> & {
      select?: CharacterHeroCountAggregateInputType | true
    }

  export interface CharacterHeroDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CharacterHero'], meta: { name: 'CharacterHero' } }
    /**
     * Find zero or one CharacterHero that matches the filter.
     * @param {CharacterHeroFindUniqueArgs} args - Arguments to find a CharacterHero
     * @example
     * // Get one CharacterHero
     * const characterHero = await prisma.characterHero.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CharacterHeroFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CharacterHeroFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CharacterHero'> extends True ? Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one CharacterHero that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CharacterHeroFindUniqueOrThrowArgs} args - Arguments to find a CharacterHero
     * @example
     * // Get one CharacterHero
     * const characterHero = await prisma.characterHero.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CharacterHeroFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterHeroFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first CharacterHero that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterHeroFindFirstArgs} args - Arguments to find a CharacterHero
     * @example
     * // Get one CharacterHero
     * const characterHero = await prisma.characterHero.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CharacterHeroFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CharacterHeroFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CharacterHero'> extends True ? Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first CharacterHero that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterHeroFindFirstOrThrowArgs} args - Arguments to find a CharacterHero
     * @example
     * // Get one CharacterHero
     * const characterHero = await prisma.characterHero.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CharacterHeroFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterHeroFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more CharacterHeroes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterHeroFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CharacterHeroes
     * const characterHeroes = await prisma.characterHero.findMany()
     * 
     * // Get first 10 CharacterHeroes
     * const characterHeroes = await prisma.characterHero.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterHeroWithIdOnly = await prisma.characterHero.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CharacterHeroFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterHeroFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a CharacterHero.
     * @param {CharacterHeroCreateArgs} args - Arguments to create a CharacterHero.
     * @example
     * // Create one CharacterHero
     * const CharacterHero = await prisma.characterHero.create({
     *   data: {
     *     // ... data to create a CharacterHero
     *   }
     * })
     * 
    **/
    create<T extends CharacterHeroCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterHeroCreateArgs<ExtArgs>>
    ): Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a CharacterHero.
     * @param {CharacterHeroDeleteArgs} args - Arguments to delete one CharacterHero.
     * @example
     * // Delete one CharacterHero
     * const CharacterHero = await prisma.characterHero.delete({
     *   where: {
     *     // ... filter to delete one CharacterHero
     *   }
     * })
     * 
    **/
    delete<T extends CharacterHeroDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterHeroDeleteArgs<ExtArgs>>
    ): Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one CharacterHero.
     * @param {CharacterHeroUpdateArgs} args - Arguments to update one CharacterHero.
     * @example
     * // Update one CharacterHero
     * const characterHero = await prisma.characterHero.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CharacterHeroUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterHeroUpdateArgs<ExtArgs>>
    ): Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more CharacterHeroes.
     * @param {CharacterHeroDeleteManyArgs} args - Arguments to filter CharacterHeroes to delete.
     * @example
     * // Delete a few CharacterHeroes
     * const { count } = await prisma.characterHero.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CharacterHeroDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CharacterHeroDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CharacterHeroes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterHeroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CharacterHeroes
     * const characterHero = await prisma.characterHero.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CharacterHeroUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterHeroUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CharacterHero.
     * @param {CharacterHeroUpsertArgs} args - Arguments to update or create a CharacterHero.
     * @example
     * // Update or create a CharacterHero
     * const characterHero = await prisma.characterHero.upsert({
     *   create: {
     *     // ... data to create a CharacterHero
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CharacterHero we want to update
     *   }
     * })
    **/
    upsert<T extends CharacterHeroUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CharacterHeroUpsertArgs<ExtArgs>>
    ): Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of CharacterHeroes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterHeroCountArgs} args - Arguments to filter CharacterHeroes to count.
     * @example
     * // Count the number of CharacterHeroes
     * const count = await prisma.characterHero.count({
     *   where: {
     *     // ... the filter for the CharacterHeroes we want to count
     *   }
     * })
    **/
    count<T extends CharacterHeroCountArgs>(
      args?: Subset<T, CharacterHeroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterHeroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CharacterHero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterHeroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterHeroAggregateArgs>(args: Subset<T, CharacterHeroAggregateArgs>): Prisma.PrismaPromise<GetCharacterHeroAggregateType<T>>

    /**
     * Group by CharacterHero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterHeroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterHeroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterHeroGroupByArgs['orderBy'] }
        : { orderBy?: CharacterHeroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterHeroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterHeroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CharacterHero.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CharacterHeroClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    relations<T extends FactionRelationArgs<ExtArgs> = {}>(args?: Subset<T, FactionRelationArgs<ExtArgs>>): Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CharacterHero base type for findUnique actions
   */
  export type CharacterHeroFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
    /**
     * Filter, which CharacterHero to fetch.
     */
    where: CharacterHeroWhereUniqueInput
  }

  /**
   * CharacterHero findUnique
   */
  export interface CharacterHeroFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CharacterHeroFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CharacterHero findUniqueOrThrow
   */
  export type CharacterHeroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
    /**
     * Filter, which CharacterHero to fetch.
     */
    where: CharacterHeroWhereUniqueInput
  }


  /**
   * CharacterHero base type for findFirst actions
   */
  export type CharacterHeroFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
    /**
     * Filter, which CharacterHero to fetch.
     */
    where?: CharacterHeroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterHeroes to fetch.
     */
    orderBy?: Enumerable<CharacterHeroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterHeroes.
     */
    cursor?: CharacterHeroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterHeroes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterHeroes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterHeroes.
     */
    distinct?: Enumerable<CharacterHeroScalarFieldEnum>
  }

  /**
   * CharacterHero findFirst
   */
  export interface CharacterHeroFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CharacterHeroFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CharacterHero findFirstOrThrow
   */
  export type CharacterHeroFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
    /**
     * Filter, which CharacterHero to fetch.
     */
    where?: CharacterHeroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterHeroes to fetch.
     */
    orderBy?: Enumerable<CharacterHeroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CharacterHeroes.
     */
    cursor?: CharacterHeroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterHeroes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterHeroes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CharacterHeroes.
     */
    distinct?: Enumerable<CharacterHeroScalarFieldEnum>
  }


  /**
   * CharacterHero findMany
   */
  export type CharacterHeroFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
    /**
     * Filter, which CharacterHeroes to fetch.
     */
    where?: CharacterHeroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CharacterHeroes to fetch.
     */
    orderBy?: Enumerable<CharacterHeroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CharacterHeroes.
     */
    cursor?: CharacterHeroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CharacterHeroes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CharacterHeroes.
     */
    skip?: number
    distinct?: Enumerable<CharacterHeroScalarFieldEnum>
  }


  /**
   * CharacterHero create
   */
  export type CharacterHeroCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
    /**
     * The data needed to create a CharacterHero.
     */
    data: XOR<CharacterHeroCreateInput, CharacterHeroUncheckedCreateInput>
  }


  /**
   * CharacterHero update
   */
  export type CharacterHeroUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
    /**
     * The data needed to update a CharacterHero.
     */
    data: XOR<CharacterHeroUpdateInput, CharacterHeroUncheckedUpdateInput>
    /**
     * Choose, which CharacterHero to update.
     */
    where: CharacterHeroWhereUniqueInput
  }


  /**
   * CharacterHero updateMany
   */
  export type CharacterHeroUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CharacterHeroes.
     */
    data: XOR<CharacterHeroUpdateManyMutationInput, CharacterHeroUncheckedUpdateManyInput>
    /**
     * Filter which CharacterHeroes to update
     */
    where?: CharacterHeroWhereInput
  }


  /**
   * CharacterHero upsert
   */
  export type CharacterHeroUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
    /**
     * The filter to search for the CharacterHero to update in case it exists.
     */
    where: CharacterHeroWhereUniqueInput
    /**
     * In case the CharacterHero found by the `where` argument doesn't exist, create a new CharacterHero with this data.
     */
    create: XOR<CharacterHeroCreateInput, CharacterHeroUncheckedCreateInput>
    /**
     * In case the CharacterHero was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CharacterHeroUpdateInput, CharacterHeroUncheckedUpdateInput>
  }


  /**
   * CharacterHero delete
   */
  export type CharacterHeroDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
    /**
     * Filter which CharacterHero to delete.
     */
    where: CharacterHeroWhereUniqueInput
  }


  /**
   * CharacterHero deleteMany
   */
  export type CharacterHeroDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which CharacterHeroes to delete
     */
    where?: CharacterHeroWhereInput
  }


  /**
   * CharacterHero without action
   */
  export type CharacterHeroArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CharacterHero
     */
    select?: CharacterHeroSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CharacterHeroInclude<ExtArgs> | null
  }



  /**
   * Model FactionRelation
   */


  export type AggregateFactionRelation = {
    _count: FactionRelationCountAggregateOutputType | null
    _avg: FactionRelationAvgAggregateOutputType | null
    _sum: FactionRelationSumAggregateOutputType | null
    _min: FactionRelationMinAggregateOutputType | null
    _max: FactionRelationMaxAggregateOutputType | null
  }

  export type FactionRelationAvgAggregateOutputType = {
    heroId: number | null
  }

  export type FactionRelationSumAggregateOutputType = {
    heroId: number | null
  }

  export type FactionRelationMinAggregateOutputType = {
    heroId: number | null
    RT: string | null
    TY: string | null
    AF: string | null
    LT: string | null
    KF: string | null
    MW: string | null
    FL: string | null
    SX: string | null
    SK: string | null
    KL: string | null
    HL: string | null
  }

  export type FactionRelationMaxAggregateOutputType = {
    heroId: number | null
    RT: string | null
    TY: string | null
    AF: string | null
    LT: string | null
    KF: string | null
    MW: string | null
    FL: string | null
    SX: string | null
    SK: string | null
    KL: string | null
    HL: string | null
  }

  export type FactionRelationCountAggregateOutputType = {
    heroId: number
    RT: number
    TY: number
    AF: number
    LT: number
    KF: number
    MW: number
    FL: number
    SX: number
    SK: number
    KL: number
    HL: number
    _all: number
  }


  export type FactionRelationAvgAggregateInputType = {
    heroId?: true
  }

  export type FactionRelationSumAggregateInputType = {
    heroId?: true
  }

  export type FactionRelationMinAggregateInputType = {
    heroId?: true
    RT?: true
    TY?: true
    AF?: true
    LT?: true
    KF?: true
    MW?: true
    FL?: true
    SX?: true
    SK?: true
    KL?: true
    HL?: true
  }

  export type FactionRelationMaxAggregateInputType = {
    heroId?: true
    RT?: true
    TY?: true
    AF?: true
    LT?: true
    KF?: true
    MW?: true
    FL?: true
    SX?: true
    SK?: true
    KL?: true
    HL?: true
  }

  export type FactionRelationCountAggregateInputType = {
    heroId?: true
    RT?: true
    TY?: true
    AF?: true
    LT?: true
    KF?: true
    MW?: true
    FL?: true
    SX?: true
    SK?: true
    KL?: true
    HL?: true
    _all?: true
  }

  export type FactionRelationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FactionRelation to aggregate.
     */
    where?: FactionRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FactionRelations to fetch.
     */
    orderBy?: Enumerable<FactionRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FactionRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FactionRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FactionRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FactionRelations
    **/
    _count?: true | FactionRelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FactionRelationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FactionRelationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FactionRelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FactionRelationMaxAggregateInputType
  }

  export type GetFactionRelationAggregateType<T extends FactionRelationAggregateArgs> = {
        [P in keyof T & keyof AggregateFactionRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFactionRelation[P]>
      : GetScalarType<T[P], AggregateFactionRelation[P]>
  }




  export type FactionRelationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FactionRelationWhereInput
    orderBy?: Enumerable<FactionRelationOrderByWithAggregationInput>
    by: FactionRelationScalarFieldEnum[]
    having?: FactionRelationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FactionRelationCountAggregateInputType | true
    _avg?: FactionRelationAvgAggregateInputType
    _sum?: FactionRelationSumAggregateInputType
    _min?: FactionRelationMinAggregateInputType
    _max?: FactionRelationMaxAggregateInputType
  }


  export type FactionRelationGroupByOutputType = {
    heroId: number
    RT: string
    TY: string
    AF: string
    LT: string
    KF: string
    MW: string
    FL: string
    SX: string
    SK: string
    KL: string
    HL: string
    _count: FactionRelationCountAggregateOutputType | null
    _avg: FactionRelationAvgAggregateOutputType | null
    _sum: FactionRelationSumAggregateOutputType | null
    _min: FactionRelationMinAggregateOutputType | null
    _max: FactionRelationMaxAggregateOutputType | null
  }

  type GetFactionRelationGroupByPayload<T extends FactionRelationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FactionRelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FactionRelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FactionRelationGroupByOutputType[P]>
            : GetScalarType<T[P], FactionRelationGroupByOutputType[P]>
        }
      >
    >


  export type FactionRelationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    heroId?: boolean
    RT?: boolean
    TY?: boolean
    AF?: boolean
    LT?: boolean
    KF?: boolean
    MW?: boolean
    FL?: boolean
    SX?: boolean
    SK?: boolean
    KL?: boolean
    HL?: boolean
    hero?: boolean | CharacterHeroArgs<ExtArgs>
  }, ExtArgs["result"]["factionRelation"]>

  export type FactionRelationSelectScalar = {
    heroId?: boolean
    RT?: boolean
    TY?: boolean
    AF?: boolean
    LT?: boolean
    KF?: boolean
    MW?: boolean
    FL?: boolean
    SX?: boolean
    SK?: boolean
    KL?: boolean
    HL?: boolean
  }

  export type FactionRelationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    hero?: boolean | CharacterHeroArgs<ExtArgs>
  }


  type FactionRelationGetPayload<S extends boolean | null | undefined | FactionRelationArgs> = $Types.GetResult<FactionRelationPayload, S>

  type FactionRelationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FactionRelationFindManyArgs, 'select' | 'include'> & {
      select?: FactionRelationCountAggregateInputType | true
    }

  export interface FactionRelationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FactionRelation'], meta: { name: 'FactionRelation' } }
    /**
     * Find zero or one FactionRelation that matches the filter.
     * @param {FactionRelationFindUniqueArgs} args - Arguments to find a FactionRelation
     * @example
     * // Get one FactionRelation
     * const factionRelation = await prisma.factionRelation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FactionRelationFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FactionRelationFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FactionRelation'> extends True ? Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one FactionRelation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FactionRelationFindUniqueOrThrowArgs} args - Arguments to find a FactionRelation
     * @example
     * // Get one FactionRelation
     * const factionRelation = await prisma.factionRelation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FactionRelationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FactionRelationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first FactionRelation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactionRelationFindFirstArgs} args - Arguments to find a FactionRelation
     * @example
     * // Get one FactionRelation
     * const factionRelation = await prisma.factionRelation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FactionRelationFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FactionRelationFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FactionRelation'> extends True ? Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first FactionRelation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactionRelationFindFirstOrThrowArgs} args - Arguments to find a FactionRelation
     * @example
     * // Get one FactionRelation
     * const factionRelation = await prisma.factionRelation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FactionRelationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FactionRelationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more FactionRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactionRelationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FactionRelations
     * const factionRelations = await prisma.factionRelation.findMany()
     * 
     * // Get first 10 FactionRelations
     * const factionRelations = await prisma.factionRelation.findMany({ take: 10 })
     * 
     * // Only select the `heroId`
     * const factionRelationWithHeroIdOnly = await prisma.factionRelation.findMany({ select: { heroId: true } })
     * 
    **/
    findMany<T extends FactionRelationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FactionRelationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a FactionRelation.
     * @param {FactionRelationCreateArgs} args - Arguments to create a FactionRelation.
     * @example
     * // Create one FactionRelation
     * const FactionRelation = await prisma.factionRelation.create({
     *   data: {
     *     // ... data to create a FactionRelation
     *   }
     * })
     * 
    **/
    create<T extends FactionRelationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FactionRelationCreateArgs<ExtArgs>>
    ): Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Delete a FactionRelation.
     * @param {FactionRelationDeleteArgs} args - Arguments to delete one FactionRelation.
     * @example
     * // Delete one FactionRelation
     * const FactionRelation = await prisma.factionRelation.delete({
     *   where: {
     *     // ... filter to delete one FactionRelation
     *   }
     * })
     * 
    **/
    delete<T extends FactionRelationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FactionRelationDeleteArgs<ExtArgs>>
    ): Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one FactionRelation.
     * @param {FactionRelationUpdateArgs} args - Arguments to update one FactionRelation.
     * @example
     * // Update one FactionRelation
     * const factionRelation = await prisma.factionRelation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FactionRelationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FactionRelationUpdateArgs<ExtArgs>>
    ): Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more FactionRelations.
     * @param {FactionRelationDeleteManyArgs} args - Arguments to filter FactionRelations to delete.
     * @example
     * // Delete a few FactionRelations
     * const { count } = await prisma.factionRelation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FactionRelationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FactionRelationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FactionRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactionRelationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FactionRelations
     * const factionRelation = await prisma.factionRelation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FactionRelationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FactionRelationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FactionRelation.
     * @param {FactionRelationUpsertArgs} args - Arguments to update or create a FactionRelation.
     * @example
     * // Update or create a FactionRelation
     * const factionRelation = await prisma.factionRelation.upsert({
     *   create: {
     *     // ... data to create a FactionRelation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FactionRelation we want to update
     *   }
     * })
    **/
    upsert<T extends FactionRelationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FactionRelationUpsertArgs<ExtArgs>>
    ): Prisma__FactionRelationClient<$Types.GetResult<FactionRelationPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of FactionRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactionRelationCountArgs} args - Arguments to filter FactionRelations to count.
     * @example
     * // Count the number of FactionRelations
     * const count = await prisma.factionRelation.count({
     *   where: {
     *     // ... the filter for the FactionRelations we want to count
     *   }
     * })
    **/
    count<T extends FactionRelationCountArgs>(
      args?: Subset<T, FactionRelationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FactionRelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FactionRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactionRelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FactionRelationAggregateArgs>(args: Subset<T, FactionRelationAggregateArgs>): Prisma.PrismaPromise<GetFactionRelationAggregateType<T>>

    /**
     * Group by FactionRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactionRelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FactionRelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FactionRelationGroupByArgs['orderBy'] }
        : { orderBy?: FactionRelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FactionRelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFactionRelationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FactionRelation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FactionRelationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    hero<T extends CharacterHeroArgs<ExtArgs> = {}>(args?: Subset<T, CharacterHeroArgs<ExtArgs>>): Prisma__CharacterHeroClient<$Types.GetResult<CharacterHeroPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FactionRelation base type for findUnique actions
   */
  export type FactionRelationFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
    /**
     * Filter, which FactionRelation to fetch.
     */
    where: FactionRelationWhereUniqueInput
  }

  /**
   * FactionRelation findUnique
   */
  export interface FactionRelationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends FactionRelationFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FactionRelation findUniqueOrThrow
   */
  export type FactionRelationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
    /**
     * Filter, which FactionRelation to fetch.
     */
    where: FactionRelationWhereUniqueInput
  }


  /**
   * FactionRelation base type for findFirst actions
   */
  export type FactionRelationFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
    /**
     * Filter, which FactionRelation to fetch.
     */
    where?: FactionRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FactionRelations to fetch.
     */
    orderBy?: Enumerable<FactionRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FactionRelations.
     */
    cursor?: FactionRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FactionRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FactionRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FactionRelations.
     */
    distinct?: Enumerable<FactionRelationScalarFieldEnum>
  }

  /**
   * FactionRelation findFirst
   */
  export interface FactionRelationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends FactionRelationFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FactionRelation findFirstOrThrow
   */
  export type FactionRelationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
    /**
     * Filter, which FactionRelation to fetch.
     */
    where?: FactionRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FactionRelations to fetch.
     */
    orderBy?: Enumerable<FactionRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FactionRelations.
     */
    cursor?: FactionRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FactionRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FactionRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FactionRelations.
     */
    distinct?: Enumerable<FactionRelationScalarFieldEnum>
  }


  /**
   * FactionRelation findMany
   */
  export type FactionRelationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
    /**
     * Filter, which FactionRelations to fetch.
     */
    where?: FactionRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FactionRelations to fetch.
     */
    orderBy?: Enumerable<FactionRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FactionRelations.
     */
    cursor?: FactionRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FactionRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FactionRelations.
     */
    skip?: number
    distinct?: Enumerable<FactionRelationScalarFieldEnum>
  }


  /**
   * FactionRelation create
   */
  export type FactionRelationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
    /**
     * The data needed to create a FactionRelation.
     */
    data: XOR<FactionRelationCreateInput, FactionRelationUncheckedCreateInput>
  }


  /**
   * FactionRelation update
   */
  export type FactionRelationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
    /**
     * The data needed to update a FactionRelation.
     */
    data: XOR<FactionRelationUpdateInput, FactionRelationUncheckedUpdateInput>
    /**
     * Choose, which FactionRelation to update.
     */
    where: FactionRelationWhereUniqueInput
  }


  /**
   * FactionRelation updateMany
   */
  export type FactionRelationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FactionRelations.
     */
    data: XOR<FactionRelationUpdateManyMutationInput, FactionRelationUncheckedUpdateManyInput>
    /**
     * Filter which FactionRelations to update
     */
    where?: FactionRelationWhereInput
  }


  /**
   * FactionRelation upsert
   */
  export type FactionRelationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
    /**
     * The filter to search for the FactionRelation to update in case it exists.
     */
    where: FactionRelationWhereUniqueInput
    /**
     * In case the FactionRelation found by the `where` argument doesn't exist, create a new FactionRelation with this data.
     */
    create: XOR<FactionRelationCreateInput, FactionRelationUncheckedCreateInput>
    /**
     * In case the FactionRelation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FactionRelationUpdateInput, FactionRelationUncheckedUpdateInput>
  }


  /**
   * FactionRelation delete
   */
  export type FactionRelationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
    /**
     * Filter which FactionRelation to delete.
     */
    where: FactionRelationWhereUniqueInput
  }


  /**
   * FactionRelation deleteMany
   */
  export type FactionRelationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FactionRelations to delete
     */
    where?: FactionRelationWhereInput
  }


  /**
   * FactionRelation without action
   */
  export type FactionRelationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactionRelation
     */
    select?: FactionRelationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FactionRelationInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    login: 'login',
    role: 'role',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PageScalarFieldEnum: {
    title: 'title',
    url: 'url',
    content: 'content',
    mtime: 'mtime'
  };

  export type PageScalarFieldEnum = (typeof PageScalarFieldEnum)[keyof typeof PageScalarFieldEnum]


  export const GalleryImageScalarFieldEnum: {
    title: 'title',
    url: 'url'
  };

  export type GalleryImageScalarFieldEnum = (typeof GalleryImageScalarFieldEnum)[keyof typeof GalleryImageScalarFieldEnum]


  export const MagicRuneScalarFieldEnum: {
    name: 'name',
    baseName: 'baseName',
    src: 'src',
    branch: 'branch',
    description: 'description',
    advancedDescription: 'advancedDescription'
  };

  export type MagicRuneScalarFieldEnum = (typeof MagicRuneScalarFieldEnum)[keyof typeof MagicRuneScalarFieldEnum]


  export const CharacterCanonScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subtitle: 'subtitle',
    filter: 'filter',
    href: 'href',
    src: 'src',
    author: 'author',
    age: 'age',
    nation: 'nation',
    class: 'class',
    occupation: 'occupation',
    quests: 'quests'
  };

  export type CharacterCanonScalarFieldEnum = (typeof CharacterCanonScalarFieldEnum)[keyof typeof CharacterCanonScalarFieldEnum]


  export const CharacterHeroScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subtitle: 'subtitle',
    filter: 'filter',
    href: 'href',
    src: 'src',
    age: 'age',
    nation: 'nation',
    class: 'class',
    player: 'player',
    occupation: 'occupation',
    quests: 'quests'
  };

  export type CharacterHeroScalarFieldEnum = (typeof CharacterHeroScalarFieldEnum)[keyof typeof CharacterHeroScalarFieldEnum]


  export const FactionRelationScalarFieldEnum: {
    heroId: 'heroId',
    RT: 'RT',
    TY: 'TY',
    AF: 'AF',
    LT: 'LT',
    KF: 'KF',
    MW: 'MW',
    FL: 'FL',
    SX: 'SX',
    SK: 'SK',
    KL: 'KL',
    HL: 'HL'
  };

  export type FactionRelationScalarFieldEnum = (typeof FactionRelationScalarFieldEnum)[keyof typeof FactionRelationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    login?: StringFilter | string
    role?: StringFilter | string
    password?: StringFilter | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    login?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    login?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    login?: SortOrder
    role?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    login?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type PageWhereInput = {
    AND?: Enumerable<PageWhereInput>
    OR?: Enumerable<PageWhereInput>
    NOT?: Enumerable<PageWhereInput>
    title?: StringFilter | string
    url?: StringFilter | string
    content?: StringFilter | string
    mtime?: StringFilter | string
  }

  export type PageOrderByWithRelationInput = {
    title?: SortOrder
    url?: SortOrder
    content?: SortOrder
    mtime?: SortOrder
  }

  export type PageWhereUniqueInput = {
    url?: string
  }

  export type PageOrderByWithAggregationInput = {
    title?: SortOrder
    url?: SortOrder
    content?: SortOrder
    mtime?: SortOrder
    _count?: PageCountOrderByAggregateInput
    _max?: PageMaxOrderByAggregateInput
    _min?: PageMinOrderByAggregateInput
  }

  export type PageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PageScalarWhereWithAggregatesInput>
    OR?: Enumerable<PageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PageScalarWhereWithAggregatesInput>
    title?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    content?: StringWithAggregatesFilter | string
    mtime?: StringWithAggregatesFilter | string
  }

  export type GalleryImageWhereInput = {
    AND?: Enumerable<GalleryImageWhereInput>
    OR?: Enumerable<GalleryImageWhereInput>
    NOT?: Enumerable<GalleryImageWhereInput>
    title?: StringFilter | string
    url?: StringFilter | string
  }

  export type GalleryImageOrderByWithRelationInput = {
    title?: SortOrder
    url?: SortOrder
  }

  export type GalleryImageWhereUniqueInput = {
    url?: string
  }

  export type GalleryImageOrderByWithAggregationInput = {
    title?: SortOrder
    url?: SortOrder
    _count?: GalleryImageCountOrderByAggregateInput
    _max?: GalleryImageMaxOrderByAggregateInput
    _min?: GalleryImageMinOrderByAggregateInput
  }

  export type GalleryImageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GalleryImageScalarWhereWithAggregatesInput>
    OR?: Enumerable<GalleryImageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GalleryImageScalarWhereWithAggregatesInput>
    title?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
  }

  export type MagicRuneWhereInput = {
    AND?: Enumerable<MagicRuneWhereInput>
    OR?: Enumerable<MagicRuneWhereInput>
    NOT?: Enumerable<MagicRuneWhereInput>
    name?: StringFilter | string
    baseName?: StringFilter | string
    src?: StringFilter | string
    branch?: StringFilter | string
    description?: StringFilter | string
    advancedDescription?: StringFilter | string
  }

  export type MagicRuneOrderByWithRelationInput = {
    name?: SortOrder
    baseName?: SortOrder
    src?: SortOrder
    branch?: SortOrder
    description?: SortOrder
    advancedDescription?: SortOrder
  }

  export type MagicRuneWhereUniqueInput = {
    name?: string
    baseName?: string
  }

  export type MagicRuneOrderByWithAggregationInput = {
    name?: SortOrder
    baseName?: SortOrder
    src?: SortOrder
    branch?: SortOrder
    description?: SortOrder
    advancedDescription?: SortOrder
    _count?: MagicRuneCountOrderByAggregateInput
    _max?: MagicRuneMaxOrderByAggregateInput
    _min?: MagicRuneMinOrderByAggregateInput
  }

  export type MagicRuneScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MagicRuneScalarWhereWithAggregatesInput>
    OR?: Enumerable<MagicRuneScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MagicRuneScalarWhereWithAggregatesInput>
    name?: StringWithAggregatesFilter | string
    baseName?: StringWithAggregatesFilter | string
    src?: StringWithAggregatesFilter | string
    branch?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    advancedDescription?: StringWithAggregatesFilter | string
  }

  export type CharacterCanonWhereInput = {
    AND?: Enumerable<CharacterCanonWhereInput>
    OR?: Enumerable<CharacterCanonWhereInput>
    NOT?: Enumerable<CharacterCanonWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    subtitle?: StringNullableFilter | string | null
    filter?: StringNullableFilter | string | null
    href?: StringNullableFilter | string | null
    src?: StringNullableFilter | string | null
    author?: StringNullableFilter | string | null
    age?: StringNullableFilter | string | null
    nation?: StringNullableFilter | string | null
    class?: StringNullableFilter | string | null
    occupation?: StringNullableFilter | string | null
    quests?: StringNullableFilter | string | null
  }

  export type CharacterCanonOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrderInput | SortOrder
    filter?: SortOrderInput | SortOrder
    href?: SortOrderInput | SortOrder
    src?: SortOrderInput | SortOrder
    author?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    nation?: SortOrderInput | SortOrder
    class?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    quests?: SortOrderInput | SortOrder
  }

  export type CharacterCanonWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type CharacterCanonOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrderInput | SortOrder
    filter?: SortOrderInput | SortOrder
    href?: SortOrderInput | SortOrder
    src?: SortOrderInput | SortOrder
    author?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    nation?: SortOrderInput | SortOrder
    class?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    quests?: SortOrderInput | SortOrder
    _count?: CharacterCanonCountOrderByAggregateInput
    _avg?: CharacterCanonAvgOrderByAggregateInput
    _max?: CharacterCanonMaxOrderByAggregateInput
    _min?: CharacterCanonMinOrderByAggregateInput
    _sum?: CharacterCanonSumOrderByAggregateInput
  }

  export type CharacterCanonScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CharacterCanonScalarWhereWithAggregatesInput>
    OR?: Enumerable<CharacterCanonScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CharacterCanonScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    subtitle?: StringNullableWithAggregatesFilter | string | null
    filter?: StringNullableWithAggregatesFilter | string | null
    href?: StringNullableWithAggregatesFilter | string | null
    src?: StringNullableWithAggregatesFilter | string | null
    author?: StringNullableWithAggregatesFilter | string | null
    age?: StringNullableWithAggregatesFilter | string | null
    nation?: StringNullableWithAggregatesFilter | string | null
    class?: StringNullableWithAggregatesFilter | string | null
    occupation?: StringNullableWithAggregatesFilter | string | null
    quests?: StringNullableWithAggregatesFilter | string | null
  }

  export type CharacterHeroWhereInput = {
    AND?: Enumerable<CharacterHeroWhereInput>
    OR?: Enumerable<CharacterHeroWhereInput>
    NOT?: Enumerable<CharacterHeroWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    subtitle?: StringNullableFilter | string | null
    filter?: StringNullableFilter | string | null
    href?: StringNullableFilter | string | null
    src?: StringNullableFilter | string | null
    age?: StringNullableFilter | string | null
    nation?: StringNullableFilter | string | null
    class?: StringNullableFilter | string | null
    player?: StringNullableFilter | string | null
    occupation?: StringNullableFilter | string | null
    quests?: StringNullableFilter | string | null
    relations?: XOR<FactionRelationRelationFilter, FactionRelationWhereInput> | null
  }

  export type CharacterHeroOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrderInput | SortOrder
    filter?: SortOrderInput | SortOrder
    href?: SortOrderInput | SortOrder
    src?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    nation?: SortOrderInput | SortOrder
    class?: SortOrderInput | SortOrder
    player?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    quests?: SortOrderInput | SortOrder
    relations?: FactionRelationOrderByWithRelationInput
  }

  export type CharacterHeroWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type CharacterHeroOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrderInput | SortOrder
    filter?: SortOrderInput | SortOrder
    href?: SortOrderInput | SortOrder
    src?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    nation?: SortOrderInput | SortOrder
    class?: SortOrderInput | SortOrder
    player?: SortOrderInput | SortOrder
    occupation?: SortOrderInput | SortOrder
    quests?: SortOrderInput | SortOrder
    _count?: CharacterHeroCountOrderByAggregateInput
    _avg?: CharacterHeroAvgOrderByAggregateInput
    _max?: CharacterHeroMaxOrderByAggregateInput
    _min?: CharacterHeroMinOrderByAggregateInput
    _sum?: CharacterHeroSumOrderByAggregateInput
  }

  export type CharacterHeroScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CharacterHeroScalarWhereWithAggregatesInput>
    OR?: Enumerable<CharacterHeroScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CharacterHeroScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    subtitle?: StringNullableWithAggregatesFilter | string | null
    filter?: StringNullableWithAggregatesFilter | string | null
    href?: StringNullableWithAggregatesFilter | string | null
    src?: StringNullableWithAggregatesFilter | string | null
    age?: StringNullableWithAggregatesFilter | string | null
    nation?: StringNullableWithAggregatesFilter | string | null
    class?: StringNullableWithAggregatesFilter | string | null
    player?: StringNullableWithAggregatesFilter | string | null
    occupation?: StringNullableWithAggregatesFilter | string | null
    quests?: StringNullableWithAggregatesFilter | string | null
  }

  export type FactionRelationWhereInput = {
    AND?: Enumerable<FactionRelationWhereInput>
    OR?: Enumerable<FactionRelationWhereInput>
    NOT?: Enumerable<FactionRelationWhereInput>
    heroId?: IntFilter | number
    RT?: StringFilter | string
    TY?: StringFilter | string
    AF?: StringFilter | string
    LT?: StringFilter | string
    KF?: StringFilter | string
    MW?: StringFilter | string
    FL?: StringFilter | string
    SX?: StringFilter | string
    SK?: StringFilter | string
    KL?: StringFilter | string
    HL?: StringFilter | string
    hero?: XOR<CharacterHeroRelationFilter, CharacterHeroWhereInput> | null
  }

  export type FactionRelationOrderByWithRelationInput = {
    heroId?: SortOrder
    RT?: SortOrder
    TY?: SortOrder
    AF?: SortOrder
    LT?: SortOrder
    KF?: SortOrder
    MW?: SortOrder
    FL?: SortOrder
    SX?: SortOrder
    SK?: SortOrder
    KL?: SortOrder
    HL?: SortOrder
    hero?: CharacterHeroOrderByWithRelationInput
  }

  export type FactionRelationWhereUniqueInput = {
    heroId?: number
  }

  export type FactionRelationOrderByWithAggregationInput = {
    heroId?: SortOrder
    RT?: SortOrder
    TY?: SortOrder
    AF?: SortOrder
    LT?: SortOrder
    KF?: SortOrder
    MW?: SortOrder
    FL?: SortOrder
    SX?: SortOrder
    SK?: SortOrder
    KL?: SortOrder
    HL?: SortOrder
    _count?: FactionRelationCountOrderByAggregateInput
    _avg?: FactionRelationAvgOrderByAggregateInput
    _max?: FactionRelationMaxOrderByAggregateInput
    _min?: FactionRelationMinOrderByAggregateInput
    _sum?: FactionRelationSumOrderByAggregateInput
  }

  export type FactionRelationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FactionRelationScalarWhereWithAggregatesInput>
    OR?: Enumerable<FactionRelationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FactionRelationScalarWhereWithAggregatesInput>
    heroId?: IntWithAggregatesFilter | number
    RT?: StringWithAggregatesFilter | string
    TY?: StringWithAggregatesFilter | string
    AF?: StringWithAggregatesFilter | string
    LT?: StringWithAggregatesFilter | string
    KF?: StringWithAggregatesFilter | string
    MW?: StringWithAggregatesFilter | string
    FL?: StringWithAggregatesFilter | string
    SX?: StringWithAggregatesFilter | string
    SK?: StringWithAggregatesFilter | string
    KL?: StringWithAggregatesFilter | string
    HL?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    login: string
    role?: string
    password: string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    login: string
    role?: string
    password: string
  }

  export type UserUpdateInput = {
    login?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateManyMutationInput = {
    login?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type PageCreateInput = {
    title: string
    url: string
    content: string
    mtime: string
  }

  export type PageUncheckedCreateInput = {
    title: string
    url: string
    content: string
    mtime: string
  }

  export type PageUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mtime?: StringFieldUpdateOperationsInput | string
  }

  export type PageUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mtime?: StringFieldUpdateOperationsInput | string
  }

  export type PageUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mtime?: StringFieldUpdateOperationsInput | string
  }

  export type PageUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mtime?: StringFieldUpdateOperationsInput | string
  }

  export type GalleryImageCreateInput = {
    title: string
    url: string
  }

  export type GalleryImageUncheckedCreateInput = {
    title: string
    url: string
  }

  export type GalleryImageUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GalleryImageUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GalleryImageUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GalleryImageUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type MagicRuneCreateInput = {
    name: string
    baseName: string
    src: string
    branch: string
    description: string
    advancedDescription: string
  }

  export type MagicRuneUncheckedCreateInput = {
    name: string
    baseName: string
    src: string
    branch: string
    description: string
    advancedDescription: string
  }

  export type MagicRuneUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseName?: StringFieldUpdateOperationsInput | string
    src?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    advancedDescription?: StringFieldUpdateOperationsInput | string
  }

  export type MagicRuneUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseName?: StringFieldUpdateOperationsInput | string
    src?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    advancedDescription?: StringFieldUpdateOperationsInput | string
  }

  export type MagicRuneUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseName?: StringFieldUpdateOperationsInput | string
    src?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    advancedDescription?: StringFieldUpdateOperationsInput | string
  }

  export type MagicRuneUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    baseName?: StringFieldUpdateOperationsInput | string
    src?: StringFieldUpdateOperationsInput | string
    branch?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    advancedDescription?: StringFieldUpdateOperationsInput | string
  }

  export type CharacterCanonCreateInput = {
    name: string
    subtitle?: string | null
    filter?: string | null
    href?: string | null
    src?: string | null
    author?: string | null
    age?: string | null
    nation?: string | null
    class?: string | null
    occupation?: string | null
    quests?: string | null
  }

  export type CharacterCanonUncheckedCreateInput = {
    id?: number
    name: string
    subtitle?: string | null
    filter?: string | null
    href?: string | null
    src?: string | null
    author?: string | null
    age?: string | null
    nation?: string | null
    class?: string | null
    occupation?: string | null
    quests?: string | null
  }

  export type CharacterCanonUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CharacterCanonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CharacterCanonUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CharacterCanonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    author?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CharacterHeroCreateInput = {
    name: string
    subtitle?: string | null
    filter?: string | null
    href?: string | null
    src?: string | null
    age?: string | null
    nation?: string | null
    class?: string | null
    player?: string | null
    occupation?: string | null
    quests?: string | null
    relations?: FactionRelationCreateNestedOneWithoutHeroInput
  }

  export type CharacterHeroUncheckedCreateInput = {
    id?: number
    name: string
    subtitle?: string | null
    filter?: string | null
    href?: string | null
    src?: string | null
    age?: string | null
    nation?: string | null
    class?: string | null
    player?: string | null
    occupation?: string | null
    quests?: string | null
    relations?: FactionRelationUncheckedCreateNestedOneWithoutHeroInput
  }

  export type CharacterHeroUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    player?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
    relations?: FactionRelationUpdateOneWithoutHeroNestedInput
  }

  export type CharacterHeroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    player?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
    relations?: FactionRelationUncheckedUpdateOneWithoutHeroNestedInput
  }

  export type CharacterHeroUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    player?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CharacterHeroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    player?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FactionRelationCreateInput = {
    RT: string
    TY: string
    AF: string
    LT: string
    KF: string
    MW: string
    FL: string
    SX: string
    SK: string
    KL: string
    HL: string
    hero?: CharacterHeroCreateNestedOneWithoutRelationsInput
  }

  export type FactionRelationUncheckedCreateInput = {
    heroId: number
    RT: string
    TY: string
    AF: string
    LT: string
    KF: string
    MW: string
    FL: string
    SX: string
    SK: string
    KL: string
    HL: string
  }

  export type FactionRelationUpdateInput = {
    RT?: StringFieldUpdateOperationsInput | string
    TY?: StringFieldUpdateOperationsInput | string
    AF?: StringFieldUpdateOperationsInput | string
    LT?: StringFieldUpdateOperationsInput | string
    KF?: StringFieldUpdateOperationsInput | string
    MW?: StringFieldUpdateOperationsInput | string
    FL?: StringFieldUpdateOperationsInput | string
    SX?: StringFieldUpdateOperationsInput | string
    SK?: StringFieldUpdateOperationsInput | string
    KL?: StringFieldUpdateOperationsInput | string
    HL?: StringFieldUpdateOperationsInput | string
    hero?: CharacterHeroUpdateOneWithoutRelationsNestedInput
  }

  export type FactionRelationUncheckedUpdateInput = {
    heroId?: IntFieldUpdateOperationsInput | number
    RT?: StringFieldUpdateOperationsInput | string
    TY?: StringFieldUpdateOperationsInput | string
    AF?: StringFieldUpdateOperationsInput | string
    LT?: StringFieldUpdateOperationsInput | string
    KF?: StringFieldUpdateOperationsInput | string
    MW?: StringFieldUpdateOperationsInput | string
    FL?: StringFieldUpdateOperationsInput | string
    SX?: StringFieldUpdateOperationsInput | string
    SK?: StringFieldUpdateOperationsInput | string
    KL?: StringFieldUpdateOperationsInput | string
    HL?: StringFieldUpdateOperationsInput | string
  }

  export type FactionRelationUpdateManyMutationInput = {
    RT?: StringFieldUpdateOperationsInput | string
    TY?: StringFieldUpdateOperationsInput | string
    AF?: StringFieldUpdateOperationsInput | string
    LT?: StringFieldUpdateOperationsInput | string
    KF?: StringFieldUpdateOperationsInput | string
    MW?: StringFieldUpdateOperationsInput | string
    FL?: StringFieldUpdateOperationsInput | string
    SX?: StringFieldUpdateOperationsInput | string
    SK?: StringFieldUpdateOperationsInput | string
    KL?: StringFieldUpdateOperationsInput | string
    HL?: StringFieldUpdateOperationsInput | string
  }

  export type FactionRelationUncheckedUpdateManyInput = {
    heroId?: IntFieldUpdateOperationsInput | number
    RT?: StringFieldUpdateOperationsInput | string
    TY?: StringFieldUpdateOperationsInput | string
    AF?: StringFieldUpdateOperationsInput | string
    LT?: StringFieldUpdateOperationsInput | string
    KF?: StringFieldUpdateOperationsInput | string
    MW?: StringFieldUpdateOperationsInput | string
    FL?: StringFieldUpdateOperationsInput | string
    SX?: StringFieldUpdateOperationsInput | string
    SK?: StringFieldUpdateOperationsInput | string
    KL?: StringFieldUpdateOperationsInput | string
    HL?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    role?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type PageCountOrderByAggregateInput = {
    title?: SortOrder
    url?: SortOrder
    content?: SortOrder
    mtime?: SortOrder
  }

  export type PageMaxOrderByAggregateInput = {
    title?: SortOrder
    url?: SortOrder
    content?: SortOrder
    mtime?: SortOrder
  }

  export type PageMinOrderByAggregateInput = {
    title?: SortOrder
    url?: SortOrder
    content?: SortOrder
    mtime?: SortOrder
  }

  export type GalleryImageCountOrderByAggregateInput = {
    title?: SortOrder
    url?: SortOrder
  }

  export type GalleryImageMaxOrderByAggregateInput = {
    title?: SortOrder
    url?: SortOrder
  }

  export type GalleryImageMinOrderByAggregateInput = {
    title?: SortOrder
    url?: SortOrder
  }

  export type MagicRuneCountOrderByAggregateInput = {
    name?: SortOrder
    baseName?: SortOrder
    src?: SortOrder
    branch?: SortOrder
    description?: SortOrder
    advancedDescription?: SortOrder
  }

  export type MagicRuneMaxOrderByAggregateInput = {
    name?: SortOrder
    baseName?: SortOrder
    src?: SortOrder
    branch?: SortOrder
    description?: SortOrder
    advancedDescription?: SortOrder
  }

  export type MagicRuneMinOrderByAggregateInput = {
    name?: SortOrder
    baseName?: SortOrder
    src?: SortOrder
    branch?: SortOrder
    description?: SortOrder
    advancedDescription?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CharacterCanonCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    filter?: SortOrder
    href?: SortOrder
    src?: SortOrder
    author?: SortOrder
    age?: SortOrder
    nation?: SortOrder
    class?: SortOrder
    occupation?: SortOrder
    quests?: SortOrder
  }

  export type CharacterCanonAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CharacterCanonMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    filter?: SortOrder
    href?: SortOrder
    src?: SortOrder
    author?: SortOrder
    age?: SortOrder
    nation?: SortOrder
    class?: SortOrder
    occupation?: SortOrder
    quests?: SortOrder
  }

  export type CharacterCanonMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    filter?: SortOrder
    href?: SortOrder
    src?: SortOrder
    author?: SortOrder
    age?: SortOrder
    nation?: SortOrder
    class?: SortOrder
    occupation?: SortOrder
    quests?: SortOrder
  }

  export type CharacterCanonSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type FactionRelationRelationFilter = {
    is?: FactionRelationWhereInput | null
    isNot?: FactionRelationWhereInput | null
  }

  export type CharacterHeroCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    filter?: SortOrder
    href?: SortOrder
    src?: SortOrder
    age?: SortOrder
    nation?: SortOrder
    class?: SortOrder
    player?: SortOrder
    occupation?: SortOrder
    quests?: SortOrder
  }

  export type CharacterHeroAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CharacterHeroMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    filter?: SortOrder
    href?: SortOrder
    src?: SortOrder
    age?: SortOrder
    nation?: SortOrder
    class?: SortOrder
    player?: SortOrder
    occupation?: SortOrder
    quests?: SortOrder
  }

  export type CharacterHeroMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subtitle?: SortOrder
    filter?: SortOrder
    href?: SortOrder
    src?: SortOrder
    age?: SortOrder
    nation?: SortOrder
    class?: SortOrder
    player?: SortOrder
    occupation?: SortOrder
    quests?: SortOrder
  }

  export type CharacterHeroSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CharacterHeroRelationFilter = {
    is?: CharacterHeroWhereInput | null
    isNot?: CharacterHeroWhereInput | null
  }

  export type FactionRelationCountOrderByAggregateInput = {
    heroId?: SortOrder
    RT?: SortOrder
    TY?: SortOrder
    AF?: SortOrder
    LT?: SortOrder
    KF?: SortOrder
    MW?: SortOrder
    FL?: SortOrder
    SX?: SortOrder
    SK?: SortOrder
    KL?: SortOrder
    HL?: SortOrder
  }

  export type FactionRelationAvgOrderByAggregateInput = {
    heroId?: SortOrder
  }

  export type FactionRelationMaxOrderByAggregateInput = {
    heroId?: SortOrder
    RT?: SortOrder
    TY?: SortOrder
    AF?: SortOrder
    LT?: SortOrder
    KF?: SortOrder
    MW?: SortOrder
    FL?: SortOrder
    SX?: SortOrder
    SK?: SortOrder
    KL?: SortOrder
    HL?: SortOrder
  }

  export type FactionRelationMinOrderByAggregateInput = {
    heroId?: SortOrder
    RT?: SortOrder
    TY?: SortOrder
    AF?: SortOrder
    LT?: SortOrder
    KF?: SortOrder
    MW?: SortOrder
    FL?: SortOrder
    SX?: SortOrder
    SK?: SortOrder
    KL?: SortOrder
    HL?: SortOrder
  }

  export type FactionRelationSumOrderByAggregateInput = {
    heroId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FactionRelationCreateNestedOneWithoutHeroInput = {
    create?: XOR<FactionRelationCreateWithoutHeroInput, FactionRelationUncheckedCreateWithoutHeroInput>
    connectOrCreate?: FactionRelationCreateOrConnectWithoutHeroInput
    connect?: FactionRelationWhereUniqueInput
  }

  export type FactionRelationUncheckedCreateNestedOneWithoutHeroInput = {
    create?: XOR<FactionRelationCreateWithoutHeroInput, FactionRelationUncheckedCreateWithoutHeroInput>
    connectOrCreate?: FactionRelationCreateOrConnectWithoutHeroInput
    connect?: FactionRelationWhereUniqueInput
  }

  export type FactionRelationUpdateOneWithoutHeroNestedInput = {
    create?: XOR<FactionRelationCreateWithoutHeroInput, FactionRelationUncheckedCreateWithoutHeroInput>
    connectOrCreate?: FactionRelationCreateOrConnectWithoutHeroInput
    upsert?: FactionRelationUpsertWithoutHeroInput
    disconnect?: boolean
    delete?: boolean
    connect?: FactionRelationWhereUniqueInput
    update?: XOR<FactionRelationUpdateWithoutHeroInput, FactionRelationUncheckedUpdateWithoutHeroInput>
  }

  export type FactionRelationUncheckedUpdateOneWithoutHeroNestedInput = {
    create?: XOR<FactionRelationCreateWithoutHeroInput, FactionRelationUncheckedCreateWithoutHeroInput>
    connectOrCreate?: FactionRelationCreateOrConnectWithoutHeroInput
    upsert?: FactionRelationUpsertWithoutHeroInput
    disconnect?: boolean
    delete?: boolean
    connect?: FactionRelationWhereUniqueInput
    update?: XOR<FactionRelationUpdateWithoutHeroInput, FactionRelationUncheckedUpdateWithoutHeroInput>
  }

  export type CharacterHeroCreateNestedOneWithoutRelationsInput = {
    create?: XOR<CharacterHeroCreateWithoutRelationsInput, CharacterHeroUncheckedCreateWithoutRelationsInput>
    connectOrCreate?: CharacterHeroCreateOrConnectWithoutRelationsInput
    connect?: CharacterHeroWhereUniqueInput
  }

  export type CharacterHeroUpdateOneWithoutRelationsNestedInput = {
    create?: XOR<CharacterHeroCreateWithoutRelationsInput, CharacterHeroUncheckedCreateWithoutRelationsInput>
    connectOrCreate?: CharacterHeroCreateOrConnectWithoutRelationsInput
    upsert?: CharacterHeroUpsertWithoutRelationsInput
    disconnect?: boolean
    delete?: boolean
    connect?: CharacterHeroWhereUniqueInput
    update?: XOR<CharacterHeroUpdateWithoutRelationsInput, CharacterHeroUncheckedUpdateWithoutRelationsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type FactionRelationCreateWithoutHeroInput = {
    RT: string
    TY: string
    AF: string
    LT: string
    KF: string
    MW: string
    FL: string
    SX: string
    SK: string
    KL: string
    HL: string
  }

  export type FactionRelationUncheckedCreateWithoutHeroInput = {
    RT: string
    TY: string
    AF: string
    LT: string
    KF: string
    MW: string
    FL: string
    SX: string
    SK: string
    KL: string
    HL: string
  }

  export type FactionRelationCreateOrConnectWithoutHeroInput = {
    where: FactionRelationWhereUniqueInput
    create: XOR<FactionRelationCreateWithoutHeroInput, FactionRelationUncheckedCreateWithoutHeroInput>
  }

  export type FactionRelationUpsertWithoutHeroInput = {
    update: XOR<FactionRelationUpdateWithoutHeroInput, FactionRelationUncheckedUpdateWithoutHeroInput>
    create: XOR<FactionRelationCreateWithoutHeroInput, FactionRelationUncheckedCreateWithoutHeroInput>
  }

  export type FactionRelationUpdateWithoutHeroInput = {
    RT?: StringFieldUpdateOperationsInput | string
    TY?: StringFieldUpdateOperationsInput | string
    AF?: StringFieldUpdateOperationsInput | string
    LT?: StringFieldUpdateOperationsInput | string
    KF?: StringFieldUpdateOperationsInput | string
    MW?: StringFieldUpdateOperationsInput | string
    FL?: StringFieldUpdateOperationsInput | string
    SX?: StringFieldUpdateOperationsInput | string
    SK?: StringFieldUpdateOperationsInput | string
    KL?: StringFieldUpdateOperationsInput | string
    HL?: StringFieldUpdateOperationsInput | string
  }

  export type FactionRelationUncheckedUpdateWithoutHeroInput = {
    RT?: StringFieldUpdateOperationsInput | string
    TY?: StringFieldUpdateOperationsInput | string
    AF?: StringFieldUpdateOperationsInput | string
    LT?: StringFieldUpdateOperationsInput | string
    KF?: StringFieldUpdateOperationsInput | string
    MW?: StringFieldUpdateOperationsInput | string
    FL?: StringFieldUpdateOperationsInput | string
    SX?: StringFieldUpdateOperationsInput | string
    SK?: StringFieldUpdateOperationsInput | string
    KL?: StringFieldUpdateOperationsInput | string
    HL?: StringFieldUpdateOperationsInput | string
  }

  export type CharacterHeroCreateWithoutRelationsInput = {
    name: string
    subtitle?: string | null
    filter?: string | null
    href?: string | null
    src?: string | null
    age?: string | null
    nation?: string | null
    class?: string | null
    player?: string | null
    occupation?: string | null
    quests?: string | null
  }

  export type CharacterHeroUncheckedCreateWithoutRelationsInput = {
    id?: number
    name: string
    subtitle?: string | null
    filter?: string | null
    href?: string | null
    src?: string | null
    age?: string | null
    nation?: string | null
    class?: string | null
    player?: string | null
    occupation?: string | null
    quests?: string | null
  }

  export type CharacterHeroCreateOrConnectWithoutRelationsInput = {
    where: CharacterHeroWhereUniqueInput
    create: XOR<CharacterHeroCreateWithoutRelationsInput, CharacterHeroUncheckedCreateWithoutRelationsInput>
  }

  export type CharacterHeroUpsertWithoutRelationsInput = {
    update: XOR<CharacterHeroUpdateWithoutRelationsInput, CharacterHeroUncheckedUpdateWithoutRelationsInput>
    create: XOR<CharacterHeroCreateWithoutRelationsInput, CharacterHeroUncheckedCreateWithoutRelationsInput>
  }

  export type CharacterHeroUpdateWithoutRelationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    player?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CharacterHeroUncheckedUpdateWithoutRelationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    subtitle?: NullableStringFieldUpdateOperationsInput | string | null
    filter?: NullableStringFieldUpdateOperationsInput | string | null
    href?: NullableStringFieldUpdateOperationsInput | string | null
    src?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    nation?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    player?: NullableStringFieldUpdateOperationsInput | string | null
    occupation?: NullableStringFieldUpdateOperationsInput | string | null
    quests?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}